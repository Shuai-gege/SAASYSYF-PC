{"remainingRequest":"D:\\ysyf\\iguard-vue01\\node_modules\\babel-loader\\lib\\index.js!D:\\ysyf\\iguard-vue01\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\ysyf\\iguard-vue01\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ysyf\\iguard-vue01\\src\\views\\angel\\talertconfig\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ysyf\\iguard-vue01\\src\\views\\angel\\talertconfig\\index.vue","mtime":1586084705000},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1586085021683},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\babel-loader\\lib\\index.js","mtime":1586085013966},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1586085021683},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\vue-loader\\lib\\index.js","mtime":1586085255129}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:\\\\ysyf\\\\iguard-vue01\\\\node_modules\\\\@babel\\\\runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"D:\\\\ysyf\\\\iguard-vue01\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/asyncToGenerator\"));\n\nvar _auth = require(\"@/utils/auth\");\n\nvar _talertconfig = require(\"@/api/angel/talertconfig/talertconfig\");\n\nvar _Pagination = _interopRequireDefault(require(\"@/components/Pagination\"));\n\nvar _dateUtil = require(\"@/utils/dateUtil\");\n\nvar _utils = require(\"@/utils\");\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// Secondary package based on el-pagination\nvar token = (0, _auth.getToken)();\nvar entityVO = {\n  id: '',\n  alertName: '',\n  state: '',\n  statisticSwitch: '',\n  popSwitch: '',\n  pushSwitch: '',\n  vanishTime: '',\n  heartRateLow: '',\n  heartRateHigh: '',\n  powerLow: '',\n  pushTel: ''\n};\nvar _default = {\n  name: \"talertconfig\",\n  components: {\n    Pagination: _Pagination.default\n  },\n  data: function data() {\n    return {\n      list: null,\n      total: 0,\n      tableKey: 0,\n      listLoading: false,\n      listQuery: {\n        page: 1,\n        limit: 10,\n        id: '',\n        alertName: '',\n        state: '',\n        statisticSwitch: '',\n        popSwitch: '',\n        pushSwitch: '',\n        vanishTime: '',\n        heartRateLow: '',\n        heartRateHigh: '',\n        powerLow: '',\n        pushTel: ''\n      },\n      headersObj: {\n        'LinkAdmin-Token': token\n      },\n      activeName: 'first',\n      dialogVisibleEdit: false,\n      dialogVisibleAdd: false,\n      dialogType: 'new',\n      entityVO: Object.assign({}, entityVO)\n    };\n  },\n  watch: {\n    searchDeptName: function searchDeptName(val) {\n      this.$refs.serchDeptTree.filter(val);\n    }\n  },\n  created: function created() {\n    this.getList();\n  },\n  methods: {\n    getList: function () {\n      var _getList = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var res;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.listLoading = true; // If the Promise is rejected, the rejected value is thrown.\n\n                _context.prev = 1;\n                _context.next = 4;\n                return (0, _talertconfig.talertconfiglist)(this.listQuery);\n\n              case 4:\n                res = _context.sent;\n                this.listLoading = false;\n                this.list = res.result.rows;\n                this.total = res.result.records;\n                _context.next = 13;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](1);\n                this.listLoading = false;\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 10]]);\n      }));\n\n      function getList() {\n        return _getList.apply(this, arguments);\n      }\n\n      return getList;\n    }(),\n    // 查询\n    handleSearch: function handleSearch() {\n      this.getList();\n    },\n    // 点击编辑按钮触发\n    handleEdit: function handleEdit(scope) {\n      this.dialogVisibleEdit = true;\n      this.entityVO = (0, _utils.deepClone)(scope.row);\n    },\n    // 点击新增按钮触发\n    handleAdd: function handleAdd(scope) {\n      this.dialogVisibleAdd = true;\n    },\n    // 编辑功能结束，点击确定按钮触发\n    confirmTalertconfigEdit: function () {\n      var _confirmTalertconfigEdit = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var res, result;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return (0, _talertconfig.talertconfigedit)(this.entityVO);\n\n              case 2:\n                res = _context2.sent;\n                result = res.code;\n\n                if (result == 20000) {\n                  this.$message({\n                    showClose: true,\n                    message: '编辑成功',\n                    type: 'success'\n                  });\n                  this.dialogVisibleEdit = false;\n                  this.getList();\n                }\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function confirmTalertconfigEdit() {\n        return _confirmTalertconfigEdit.apply(this, arguments);\n      }\n\n      return confirmTalertconfigEdit;\n    }(),\n    // 新增功能结束，点击确定按钮触发\n    confirmTalertconfigAdd: function () {\n      var _confirmTalertconfigAdd = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3() {\n        var res, result;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return (0, _talertconfig.talertconfigadd)(this.entityVO);\n\n              case 2:\n                res = _context3.sent;\n                result = res.code;\n\n                if (result == 20000) {\n                  this.$message({\n                    showClose: true,\n                    message: '新增成功',\n                    type: 'success'\n                  });\n                  this.dialogVisibleAdd = false;\n                  this.getList();\n                }\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function confirmTalertconfigAdd() {\n        return _confirmTalertconfigAdd.apply(this, arguments);\n      }\n\n      return confirmTalertconfigAdd;\n    }(),\n    // 点击删除按钮触发 删除生成的表的记录\n    handleDelete: function () {\n      var _handleDelete = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee5(scope) {\n        var _this = this;\n\n        var h;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                h = this.$createElement;\n                this.entityVO = (0, _utils.deepClone)(scope.row);\n                this.$msgbox({\n                  title: '删除消息',\n                  message: h('p', null, [h('span', null, '确定要删除 '), h('i', {\n                    style: 'color: teal'\n                  }, '这条记录吗?')]),\n                  showCancelButton: true,\n                  confirmButtonText: '确定',\n                  cancelButtonText: '取消',\n                  beforeClose: function () {\n                    var _beforeClose = (0, _asyncToGenerator2.default)(\n                    /*#__PURE__*/\n                    regeneratorRuntime.mark(function _callee4(action, instance, done) {\n                      var res;\n                      return regeneratorRuntime.wrap(function _callee4$(_context4) {\n                        while (1) {\n                          switch (_context4.prev = _context4.next) {\n                            case 0:\n                              if (!(action === 'confirm')) {\n                                _context4.next = 7;\n                                break;\n                              }\n\n                              _context4.next = 3;\n                              return (0, _talertconfig.talertconfigdelete)(_this.entityVO);\n\n                            case 3:\n                              res = _context4.sent;\n\n                              if (res.code == 20000) {\n                                done();\n                              }\n\n                              _context4.next = 8;\n                              break;\n\n                            case 7:\n                              done();\n\n                            case 8:\n                            case \"end\":\n                              return _context4.stop();\n                          }\n                        }\n                      }, _callee4);\n                    }));\n\n                    function beforeClose(_x2, _x3, _x4) {\n                      return _beforeClose.apply(this, arguments);\n                    }\n\n                    return beforeClose;\n                  }()\n                }).then(function (action) {\n                  _this.$message({\n                    showClose: true,\n                    type: 'success',\n                    message: '删除成功'\n                  });\n\n                  _this.getList();\n                });\n\n              case 3:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function handleDelete(_x) {\n        return _handleDelete.apply(this, arguments);\n      }\n\n      return handleDelete;\n    }(),\n    // 用户状态修改\n    handleStateChange: function handleStateChange(row) {\n      var _this2 = this;\n\n      debugger;\n      var text = row.state === 1 ? '启用' : '禁用';\n      this.$confirm('确认要 [' + text + '] [' + row.alertName + '] 用户吗?', '警告', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(\n      /*#__PURE__*/\n      (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee6() {\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return (0, _talertconfig.talertconfigedit)({\n                  uid: row.uid,\n                  state: row.state\n                });\n\n              case 2:\n                _this2.$message({\n                  message: text + '[' + row.alertName + ']成功',\n                  type: 'success'\n                });\n\n              case 3:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }))).catch(function (err) {\n        console.error(err);\n        row.state = row.state === 0 ? 1 : 0;\n      });\n    },\n    // 统计开关状态修改\n    handleStatisticSwitchChange: function handleStatisticSwitchChange(row) {\n      var _this3 = this;\n\n      debugger;\n      var text = row.statisticSwitch === 1 ? '启用' : '禁用';\n      this.$confirm('确认要 [' + text + '] [' + row.alertName + '] 的统计功能吗?', '警告', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(\n      /*#__PURE__*/\n      (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee7() {\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return (0, _talertconfig.talertconfigedit)({\n                  uid: row.uid,\n                  statisticSwitch: row.statisticSwitch\n                });\n\n              case 2:\n                _this3.$message({\n                  message: text + '统计功能成功',\n                  type: 'success'\n                });\n\n              case 3:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }))).catch(function (err) {\n        console.error(err);\n        row.statisticSwitch = row.statisticSwitch === 0 ? 1 : 0;\n      });\n    },\n    // 弹窗开关状态修改\n    handlePopSwitchChange: function handlePopSwitchChange(row) {\n      var _this4 = this;\n\n      var text = row.popSwitch === 1 ? '启用' : '禁用';\n      this.$confirm('确认要 [' + text + '] [' + row.alertName + '] 的弹窗功能吗?', '警告', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(\n      /*#__PURE__*/\n      (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee8() {\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return (0, _talertconfig.talertconfigedit)({\n                  uid: row.uid,\n                  popSwitch: row.popSwitch\n                });\n\n              case 2:\n                _this4.$message({\n                  message: text + '弹窗功能成功',\n                  type: 'success'\n                });\n\n              case 3:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }))).catch(function (err) {\n        console.error(err);\n        row.popSwitch = row.popSwitch === 0 ? 1 : 0;\n      });\n    },\n    // 推送开关状态修改\n    handlePushSwitchChange: function handlePushSwitchChange(row) {\n      var _this5 = this;\n\n      var text = row.pushSwitch === 1 ? '启用' : '禁用';\n      this.$confirm('确认要 [' + text + '] [' + row.alertName + '] 的推送功能吗?', '警告', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(\n      /*#__PURE__*/\n      (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee9() {\n        return regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return (0, _talertconfig.talertconfigedit)({\n                  uid: row.uid,\n                  pushSwitch: row.pushSwitch\n                });\n\n              case 2:\n                _this5.$message({\n                  message: text + '推送功能成功',\n                  type: 'success'\n                });\n\n              case 3:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9);\n      }))).catch(function (err) {\n        console.error(err);\n        row.pushSwitch = row.pushSwitch === 0 ? 1 : 0;\n      });\n    }\n  }\n};\nexports.default = _default;",null]}