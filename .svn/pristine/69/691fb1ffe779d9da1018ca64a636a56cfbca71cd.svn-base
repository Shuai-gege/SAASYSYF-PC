{"remainingRequest":"D:\\ysyf\\iguard-vue01\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ysyf\\iguard-vue01\\src\\views\\component\\upload\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ysyf\\iguard-vue01\\src\\views\\component\\upload\\index.vue","mtime":1586084705000},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1586085021683},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\babel-loader\\lib\\index.js","mtime":1586085013966},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1586085021683},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\vue-loader\\lib\\index.js","mtime":1586085255129}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getToken } from '@/utils/auth'\nimport { tiktokList, deleteTikTok } from '@/api/video/tiktok'\nimport Pagination from '@/components/Pagination' // Secondary package based on el-pagination\nimport { formatDateTime } from '@/utils'\nconst token = getToken()\nexport default {\n  name: 'Upload',\n  components: { Pagination },\n  data() {\n    return {\n      tableKey: 0,\n      list: null,\n      total: 0,\n      listLoading: false,\n      listQuery: {\n        page: 1,\n        limit: 10,\n        name: ''\n      },\n      headersObj: { 'LinkAdmin-Token': token },\n      uplodatPath:\n        process.env.VUE_APP_BASE_API_URL + '/public/rest/img/upload',\n      dialogVisible: false,\n      dialogVisible1: false,\n      dialogType: 'new',\n      videoUrl: ''\n    }\n  },\n  created() {\n    this.getList()\n  },\n  methods: {\n    async getList() {\n      this.listLoading = true\n      // If the Promise is rejected, the rejected value is thrown.\n      try {\n        const res = await tiktokList(this.listQuery)\n        this.listLoading = false\n        this.list = res.result.rows\n        this.total = res.result.records\n      } catch (e) {\n        this.listLoading = false\n      }\n    },\n    handleSearch() {\n      this.getList()\n    },\n    formatDateTime(row, column) {\n      return formatDateTime(row.createtime)\n    },\n    beforeUploadVideo(file) {\n      const isLt10M = file.size / 1024 / 1024 < 50\n      if (\n        [\n          'video/mp4',\n          'video/ogg',\n          'video/flv',\n          'video/avi',\n          'video/wmv',\n          'video/rmvb'\n        ].indexOf(file.type) === -1\n      ) {\n        this.$message.error('请上传正确的视频格式')\n        return false\n      }\n      if (!isLt10M) {\n        this.$message.error('上传视频大小不能超过50MB哦!')\n        return false\n      }\n    },\n    handleVideoSuccess(res, file) {\n      // 获取上传图片地址\n      if (res.code === 20000) {\n        this.$message.success('上传成功')\n        this.getList()\n      } else {\n        this.$message.error(res.msg)\n      }\n    },\n    handleCreate() {\n      this.dialogType = 'new'\n      this.dialogVisible = true\n    },\n    handleView({ row }) {\n      this.dialogVisible1 = true\n      this.videoUrl =\n        process.env.VUE_APP_BASE_API_URL +\n        '/rest/video/tiktok/view?path=' +\n        row.name\n    },\n    handleDelete({ row }) {\n      this.$confirm('确认删除?', '警告', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      })\n        .then(async() => {\n          await deleteTikTok(row.id)\n          this.$message({\n            showClose: true,\n            message: '删除成功',\n            type: 'success'\n          })\n          this.getList()\n        })\n        .catch(err => {\n          console.error(err)\n        })\n    }\n  }\n}\n",null]}