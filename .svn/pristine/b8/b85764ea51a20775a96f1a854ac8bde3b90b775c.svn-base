{"remainingRequest":"D:\\ysyf\\iguard-vue01\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ysyf\\iguard-vue01\\src\\views\\angel\\talertconfig\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ysyf\\iguard-vue01\\src\\views\\angel\\talertconfig\\index.vue","mtime":1586084705000},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1586085021683},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1586085236938},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\babel-loader\\lib\\index.js","mtime":1586085013966},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1586085021683},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\vue-loader\\lib\\index.js","mtime":1586085255129}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {getToken} from '@/utils/auth'\nimport {\n    talertconfiglist, talertconfigedit, talertconfigdelete, talertconfigadd\n} from '@/api/angel/talertconfig/talertconfig'\nimport Pagination from '@/components/Pagination' // Secondary package based on el-pagination\nimport {formatTimeToStr} from '@/utils/dateUtil'\nimport {deepClone} from '@/utils'\n\nconst token = getToken()\nconst entityVO = {\n    id: '',\n    alertName: '',\n    state: '',\n    statisticSwitch: '',\n    popSwitch: '',\n    pushSwitch: '',\n    vanishTime: '',\n    heartRateLow: '',\n    heartRateHigh: '',\n    powerLow: '',\n    pushTel: '',\n}\n\nexport default {\n    name: `talertconfig`,\n    components: {Pagination},\n    data() {\n        return {\n            list: null,\n            total: 0,\n            tableKey: 0,\n            listLoading: false,\n            listQuery: {\n                page: 1,\n                limit: 10,\n                id: '',\n                alertName: '',\n                state: '',\n                statisticSwitch: '',\n                popSwitch: '',\n                pushSwitch: '',\n                vanishTime: '',\n                heartRateLow: '',\n                heartRateHigh: '',\n                powerLow: '',\n                pushTel: '',\n            },\n            headersObj: {'LinkAdmin-Token': token},\n            activeName: 'first',\n            dialogVisibleEdit: false,\n            dialogVisibleAdd: false,\n            dialogType: 'new',\n            entityVO: Object.assign({}, entityVO),\n        }\n    },\n    watch: {\n        searchDeptName(val) {\n            this.$refs.serchDeptTree.filter(val)\n        }\n    },\n    created() {\n        this.getList()\n    },\n    methods: {\n        async getList() {\n            this.listLoading = true\n            // If the Promise is rejected, the rejected value is thrown.\n            try {\n                const res = await talertconfiglist(this.listQuery)\n                this.listLoading = false\n                this.list = res.result.rows\n                this.total = res.result.records\n            } catch (e) {\n                this.listLoading = false\n            }\n        },\n        // 查询\n        handleSearch() {\n            this.getList()\n        },\n        // 点击编辑按钮触发\n        handleEdit(scope) {\n            this.dialogVisibleEdit = true\n            this.entityVO = deepClone(scope.row)\n        },\n        // 点击新增按钮触发\n        handleAdd(scope) {\n            this.dialogVisibleAdd = true\n        },\n        // 编辑功能结束，点击确定按钮触发\n        async confirmTalertconfigEdit() {\n            const res = await talertconfigedit(this.entityVO);\n            const result = res.code;\n            if (result == 20000) {\n                this.$message({\n                    showClose: true,\n                    message: '编辑成功',\n                    type: 'success'\n                })\n                this.dialogVisibleEdit = false;\n                this.getList();\n            }\n        },\n        // 新增功能结束，点击确定按钮触发\n        async confirmTalertconfigAdd() {\n            const res = await talertconfigadd(this.entityVO);\n            const result = res.code;\n            if (result == 20000) {\n                this.$message({\n                    showClose: true,\n                    message: '新增成功',\n                    type: 'success'\n                })\n                this.dialogVisibleAdd = false;\n                this.getList();\n            }\n        },\n        // 点击删除按钮触发 删除生成的表的记录\n        async handleDelete(scope) {\n            const h = this.$createElement;\n            this.entityVO = deepClone(scope.row)\n            this.$msgbox({\n                title: '删除消息',\n                message: h('p', null, [\n                    h('span', null, '确定要删除 '),\n                    h('i', {style: 'color: teal'}, '这条记录吗?')\n                ]),\n                showCancelButton: true,\n                confirmButtonText: '确定',\n                cancelButtonText: '取消',\n                beforeClose: async (action, instance, done) => {\n                    if (action === 'confirm') {\n                        const res = await talertconfigdelete(this.entityVO);\n                        if (res.code == 20000) {\n                            done();\n                        }\n                    } else {\n                        done();\n                    }\n                }\n            }).then(action => {\n                this.$message({\n                    showClose: true,\n                    type: 'success',\n                    message: '删除成功'\n                });\n                this.getList();\n            });\n        },\n        // 用户状态修改\n        handleStateChange(row) {\n            debugger;\n            const text = row.state === 1 ? '启用' : '禁用'\n            this.$confirm(\n                '确认要 [' + text + '] [' + row.alertName + '] 用户吗?',\n                '警告',\n                {\n                    confirmButtonText: '确定',\n                    cancelButtonText: '取消',\n                    type: 'warning'\n                }\n            ).then(async () => {\n                await talertconfigedit({uid: row.uid, state: row.state})\n                this.$message({\n                    message: text + '[' + row.alertName + ']成功',\n                    type: 'success'\n                })\n            }).catch(err => {\n                console.error(err)\n                row.state = row.state === 0 ? 1 : 0\n            })\n        },\n        // 统计开关状态修改\n        handleStatisticSwitchChange(row) {\n            debugger;\n            const text = row.statisticSwitch === 1 ? '启用' : '禁用'\n            this.$confirm(\n                '确认要 [' + text + '] [' + row.alertName + '] 的统计功能吗?',\n                '警告',\n                {\n                    confirmButtonText: '确定',\n                    cancelButtonText: '取消',\n                    type: 'warning'\n                }\n            ).then(async () => {\n                await talertconfigedit({uid: row.uid, statisticSwitch: row.statisticSwitch})\n                this.$message({\n                    message: text + '统计功能成功',\n                    type: 'success'\n                })\n            }).catch(err => {\n                console.error(err)\n                row.statisticSwitch = row.statisticSwitch === 0 ? 1 : 0\n            })\n        },\n        // 弹窗开关状态修改\n        handlePopSwitchChange(row) {\n            const text = row.popSwitch === 1 ? '启用' : '禁用'\n            this.$confirm(\n                '确认要 [' + text + '] [' + row.alertName + '] 的弹窗功能吗?',\n                '警告',\n                {\n                    confirmButtonText: '确定',\n                    cancelButtonText: '取消',\n                    type: 'warning'\n                }\n            ).then(async () => {\n                await talertconfigedit({uid: row.uid, popSwitch: row.popSwitch})\n                this.$message({\n                    message: text + '弹窗功能成功',\n                    type: 'success'\n                })\n            }).catch(err => {\n                console.error(err)\n                row.popSwitch = row.popSwitch === 0 ? 1 : 0\n            })\n        },\n        // 推送开关状态修改\n        handlePushSwitchChange(row) {\n            const text = row.pushSwitch === 1 ? '启用' : '禁用'\n            this.$confirm(\n                '确认要 [' + text + '] [' + row.alertName + '] 的推送功能吗?',\n                '警告',\n                {\n                    confirmButtonText: '确定',\n                    cancelButtonText: '取消',\n                    type: 'warning'\n                }\n            ).then(async () => {\n                await talertconfigedit({uid: row.uid, pushSwitch: row.pushSwitch})\n                this.$message({\n                    message: text + '推送功能成功',\n                    type: 'success'\n                })\n            }).catch(err => {\n                console.error(err)\n                row.pushSwitch = row.pushSwitch === 0 ? 1 : 0\n            })\n        },\n    }\n}",null]}