{"remainingRequest":"D:\\ysyf\\iguard-vue01\\node_modules\\thread-loader\\dist\\cjs.js!D:\\ysyf\\iguard-vue01\\node_modules\\babel-loader\\lib\\index.js!D:\\ysyf\\iguard-vue01\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\ysyf\\iguard-vue01\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ysyf\\iguard-vue01\\src\\views\\iguard\\tbmaterialsbrand\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ysyf\\iguard-vue01\\src\\views\\iguard\\tbmaterialsbrand\\index.vue","mtime":1586160022000},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1586085021683},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1586085236938},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\babel-loader\\lib\\index.js","mtime":1586085013966},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1586085021683},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\vue-loader\\lib\\index.js","mtime":1586085255129}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"D:\\\\ysyf\\\\iguard-vue01\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getToken } from '@/utils/auth';\nimport { tbmaterialsbrandlist, tbmaterialsbrandedit, tbmaterialsbranddelete, tbmaterialsbrandadd } from '@/api/iguard/tbmaterialsbrand/tbmaterialsbrand';\nimport Pagination from '@/components/Pagination'; // Secondary package based on el-pagination\n\nimport { formatTimeToStr } from '@/utils/dateUtil';\nimport { deepClone } from '@/utils';\nvar token = getToken();\nvar entityVO = {\n  uid: localStorage.getItem('uid'),\n  id: '',\n  brandName: '',\n  createTime: ''\n};\nexport default {\n  name: \"tbmaterialsbrand\",\n  components: {\n    Pagination: Pagination\n  },\n  data: function data() {\n    return {\n      list: null,\n      total: 0,\n      tableKey: 0,\n      listLoading: false,\n      listQuery: {\n        page: 1,\n        limit: 10,\n        id: '',\n        brandName: '',\n        createTime: ''\n      },\n      headersObj: {\n        'LinkAdmin-Token': token\n      },\n      activeName: 'first',\n      dialogVisibleEdit: false,\n      dialogVisibleAdd: false,\n      dialogType: 'new',\n      entityVO: Object.assign({}, entityVO) // 搜索指定物料&设备\n      // listQuery01: {\n      //   page: \"\",\n      //   limit: \"\",\n      //   id: \"\",\n      //   brandName: \"\",\n      //   createTime: \"\"\n      // },\n      // input: \"\" //查找指定物料/设备输入框\n\n    };\n  },\n  watch: {\n    searchDeptName: function searchDeptName(val) {\n      this.$refs.serchDeptTree.filter(val);\n    }\n  },\n  created: function created() {\n    this.getList();\n  },\n  methods: {\n    // 物料/设备品牌list\n    getList: function () {\n      var _getList = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var res;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.listLoading = true; // If the Promise is rejected, the rejected value is thrown.\n\n                _context.prev = 1;\n                _context.next = 4;\n                return tbmaterialsbrandlist(this.listQuery);\n\n              case 4:\n                res = _context.sent;\n                this.listLoading = false;\n                this.list = res.result.rows;\n                this.total = res.result.records;\n                _context.next = 13;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](1);\n                this.listLoading = false;\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 10]]);\n      }));\n\n      function getList() {\n        return _getList.apply(this, arguments);\n      }\n\n      return getList;\n    }(),\n    // 查找指定物料/设备品牌\n    // async check() {\n    //   if (this.input == \"\") {\n    //     this.$message({\n    //       showClose: true,\n    //       message: \"请输入您要查找的物料&设备名\"\n    //     });\n    //   } else {\n    //     this.listQuery01.brandName = this.input;\n    //   }\n    //   try {\n    //     const res = await tbmaterialsbrandlist(this.listQuery01);\n    //     console.log(res);\n    //   } catch (e) {\n    //     console.log(e);\n    //   }\n    // },\n    // 时间格式化\n    formatDateTime: function formatDateTime(row, column) {\n      return formatTimeToStr(row.createTime, 'yyyy-MM-dd hh:mm:ss');\n    },\n    // 查询\n    // handleSearch() {\n    //   this.getList();\n    // },\n    // 点击编辑按钮触发\n    handleEdit: function handleEdit(scope) {\n      this.dialogVisibleEdit = true;\n      this.entityVO = deepClone(scope.row);\n    },\n    // 点击新增按钮触发\n    handleAdd: function handleAdd(scope) {\n      this.dialogVisibleAdd = true;\n    },\n    // 编辑功能结束，点击确定按钮触发\n    confirmTbmaterialsbrandEdit: function () {\n      var _confirmTbmaterialsbrandEdit = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var res, result;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return tbmaterialsbrandedit(this.entityVO);\n\n              case 2:\n                res = _context2.sent;\n                result = res.code;\n\n                if (result == 20000) {\n                  this.$message({\n                    showClose: true,\n                    message: '编辑成功',\n                    type: 'success'\n                  });\n                  this.dialogVisibleEdit = false;\n                  this.getList();\n                }\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function confirmTbmaterialsbrandEdit() {\n        return _confirmTbmaterialsbrandEdit.apply(this, arguments);\n      }\n\n      return confirmTbmaterialsbrandEdit;\n    }(),\n    // 新增时的返回清空输入框\n    esc: function esc() {\n      this.dialogVisibleAdd = false;\n      this.entityVO.createTime = '';\n      this.entityVO.brandName = '';\n    },\n    // 新增功能结束，点击确定按钮触发\n    confirmTbmaterialsbrandAdd: function () {\n      var _confirmTbmaterialsbrandAdd = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3() {\n        var res, result;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return tbmaterialsbrandadd(this.entityVO);\n\n              case 2:\n                res = _context3.sent;\n                result = res.code;\n\n                if (result == 20000) {\n                  this.$message({\n                    showClose: true,\n                    message: '新增成功',\n                    type: 'success'\n                  });\n                  this.dialogVisibleAdd = false;\n                  this.entityVO.brandName = '';\n                  this.entityVO.createTime = '';\n                  this.getList();\n                }\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function confirmTbmaterialsbrandAdd() {\n        return _confirmTbmaterialsbrandAdd.apply(this, arguments);\n      }\n\n      return confirmTbmaterialsbrandAdd;\n    }(),\n    // 点击删除按钮触发 删除生成的表的记录\n    handleDelete: function () {\n      var _handleDelete = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee5(scope) {\n        var _this = this;\n\n        var h;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                h = this.$createElement;\n                this.entityVO = deepClone(scope.row);\n                this.$msgbox({\n                  title: '删除消息',\n                  message: h('p', null, [h('span', null, '确定要删除 '), h('i', {\n                    style: 'color: teal'\n                  }, '这条记录吗?')]),\n                  showCancelButton: true,\n                  confirmButtonText: '确定',\n                  cancelButtonText: '取消',\n                  beforeClose: function () {\n                    var _beforeClose = _asyncToGenerator(\n                    /*#__PURE__*/\n                    regeneratorRuntime.mark(function _callee4(action, instance, done) {\n                      var res;\n                      return regeneratorRuntime.wrap(function _callee4$(_context4) {\n                        while (1) {\n                          switch (_context4.prev = _context4.next) {\n                            case 0:\n                              if (!(action === 'confirm')) {\n                                _context4.next = 7;\n                                break;\n                              }\n\n                              _context4.next = 3;\n                              return tbmaterialsbranddelete(_this.entityVO);\n\n                            case 3:\n                              res = _context4.sent;\n\n                              if (res.code == 20000) {\n                                done();\n                              }\n\n                              _context4.next = 8;\n                              break;\n\n                            case 7:\n                              done();\n\n                            case 8:\n                            case \"end\":\n                              return _context4.stop();\n                          }\n                        }\n                      }, _callee4);\n                    }));\n\n                    function beforeClose(_x2, _x3, _x4) {\n                      return _beforeClose.apply(this, arguments);\n                    }\n\n                    return beforeClose;\n                  }()\n                }).then(function (action) {\n                  _this.$message({\n                    showClose: true,\n                    type: 'success',\n                    message: '删除成功'\n                  });\n\n                  _this.getList();\n                });\n\n              case 3:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function handleDelete(_x) {\n        return _handleDelete.apply(this, arguments);\n      }\n\n      return handleDelete;\n    }()\n  }\n};",null]}