{"remainingRequest":"D:\\workspace\\selfcompanyworkspace\\vue-link-admin\\node_modules\\thread-loader\\dist\\cjs.js!D:\\workspace\\selfcompanyworkspace\\vue-link-admin\\node_modules\\babel-loader\\lib\\index.js!D:\\workspace\\selfcompanyworkspace\\vue-link-admin\\src\\store\\modules\\user.js","dependencies":[{"path":"D:\\workspace\\selfcompanyworkspace\\vue-link-admin\\src\\store\\modules\\user.js","mtime":1577239198000},{"path":"D:\\workspace\\selfcompanyworkspace\\vue-link-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\workspace\\selfcompanyworkspace\\vue-link-admin\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\workspace\\selfcompanyworkspace\\vue-link-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/web.dom.iterable\";\nimport { login as _login, logout as _logout, getInfo as _getInfo } from '@/api/permission/user';\nimport { getToken, setToken, removeToken } from '@/utils/auth';\nimport { resetRouter } from '@/router';\nvar state = {\n  token: getToken(),\n  userinfo: {},\n  roles: [],\n  menus: [],\n  permissions: []\n};\nvar mutations = {\n  SET_TOKEN: function SET_TOKEN(state, token) {\n    state.token = token;\n  },\n  SET_USER: function SET_USER(state, userinfo) {\n    state.userinfo = userinfo;\n  },\n  SET_ROLES: function SET_ROLES(state, roles) {\n    state.roles = roles;\n  },\n  SET_MENUS: function SET_MENUS(state, menus) {\n    state.menus = menus;\n  },\n  SET_PERMISSIONS: function SET_PERMISSIONS(state, permissions) {\n    state.permissions = permissions;\n  }\n};\nvar actions = {\n  // user login\n  login: function login(_ref, userInfo) {\n    var commit = _ref.commit;\n    var username = userInfo.username,\n        password = userInfo.password;\n    return new Promise(function (resolve, reject) {\n      _login({\n        username: username.trim(),\n        password: password\n      }).then(function (response) {\n        commit('SET_TOKEN', response.result);\n        setToken(response.result);\n        resolve();\n      }).catch(function (error) {\n        reject(error);\n      });\n    });\n  },\n  // get user info\n  getInfo: function getInfo(_ref2) {\n    var commit = _ref2.commit,\n        state = _ref2.state;\n    return new Promise(function (resolve, reject) {\n      _getInfo(state.token).then(function (response) {\n        if (!response) {\n          reject('Verification failed, please Login again.');\n        }\n\n        var userinfo = response.result;\n\n        if (!userinfo || userinfo == null) {\n          reject('getInfo: userinfo must be a non-null object!');\n        }\n\n        var roles = userinfo.roles,\n            menus = userinfo.menus,\n            permissions = userinfo.permissions; // roles must be a non-empty array\n\n        if (!roles || roles.length <= 0) {\n          reject('getInfo: roles must be a non-null array!');\n        }\n\n        if (!menus || menus.length <= 0) {\n          reject('getInfo: menus must be a non-null array!');\n        }\n\n        var rolesName = [];\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = roles[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var rname = _step.value;\n            rolesName.push(rname.name);\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        commit('SET_USER', userinfo);\n        commit('SET_ROLES', rolesName);\n        commit('SET_MENUS', menus);\n        commit('SET_PERMISSIONS', permissions); // resolve(response.result)\n\n        resolve();\n      }).catch(function (error) {\n        reject(error);\n      });\n    });\n  },\n  // user logout\n  logout: function logout(_ref3) {\n    var commit = _ref3.commit,\n        state = _ref3.state;\n    return new Promise(function (resolve, reject) {\n      _logout(state.token).then(function () {\n        commit('SET_TOKEN', '');\n        commit('SET_USER', {});\n        commit('SET_ROLES', []);\n        commit('SET_MENUS', []);\n        commit('SET_PERMISSIONS', []);\n        removeToken();\n        resetRouter();\n        resolve();\n      }).catch(function (error) {\n        reject(error);\n      });\n    });\n  },\n  // remove token\n  resetToken: function resetToken(_ref4) {\n    var commit = _ref4.commit;\n    return new Promise(function (resolve) {\n      commit('SET_TOKEN', '');\n      removeToken();\n      resolve();\n    });\n  }\n};\nexport default {\n  namespaced: true,\n  state: state,\n  mutations: mutations,\n  actions: actions\n};",null]}