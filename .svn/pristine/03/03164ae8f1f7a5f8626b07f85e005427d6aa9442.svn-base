{"remainingRequest":"D:\\ysyf\\iguard-vue01\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ysyf\\iguard-vue01\\src\\views\\iguard\\tbeventtypeconfig\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ysyf\\iguard-vue01\\src\\views\\iguard\\tbeventtypeconfig\\index.vue","mtime":1586159664000},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1586085021683},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\babel-loader\\lib\\index.js","mtime":1586085013966},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1586085021683},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\vue-loader\\lib\\index.js","mtime":1586085255129}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getToken } from '@/utils/auth'\nimport {\n  tbeventtypeconfiglist,\n  tbeventtypeconfigedit,\n  tbeventtypeconfigdelete,\n  tbeventtypeconfigadd,\n  getcompanydept,\n  getcompanyalluser,\n  getuserlist\n} from '@/api/iguard/tbeventtypeconfig/tbeventtypeconfig'\nimport Pagination from '@/components/Pagination' // Secondary package based on el-pagination\nimport { deepClone } from '@/utils'\nimport { formatTimeToStr } from '@/utils/dateUtil' //处理后台传来的时间\nconst token = getToken()\nconst entityVO = {\n  id: '',\n  eventType: '',\n  departmentId: '',\n  userIdA: '',\n  userIdB: '',\n  invalidUserId: '',\n  createTime: ''\n}\n\nexport default {\n  name: `tbeventtypeconfig`,\n  components: { Pagination },\n  data() {\n    return {\n      list: null,\n      total: 0,\n      tableKey: 0,\n      listLoading: false,\n      listQuery: {\n        page: 1,\n        limit: 10,\n        id: '',\n        eventType: '',\n        departmentId: '',\n        userIdA: '',\n        userIdB: '',\n        invalidUserId: '',\n        createTime: ''\n      },\n      userList: {\n        uid: '', // 人员id\n        name: '', // 人员登录名\n        vsername: '', // 人员名称\n        mobile: '', // 手机号码\n        state: '', // 用户状态，1：正常  0：禁用\n        deptid: '', // 部门id\n        jobid: '', // 岗位id\n        email: '' // 邮箱\n      },\n      headersObj: { 'LinkAdmin-Token': token },\n      activeName: 'first',\n      dialogVisibleEdit: false,\n      dialogVisibleAdd: false,\n      dialogType: 'new',\n      entityVO: Object.assign({}, entityVO),\n      value1: '',\n      falg: false, //隐藏显示部门树形图\n      filterText: '', //模糊查询所有部门\n      data: [], //所属公司所有部门\n      departmentId: '', //公司Id\n      defaultProps: {\n        //所属公司所有部门\n        children: 'childrens',\n        label: 'name'\n      },\n      restaurants: [], //响应人list\n      restaurants1: [], //响应人A\n      state1: '', //响应人A\n      state2: '', //响应人B\n      restaurants2: [], //响应人B\n      state3: '', //无效任务审批人\n      restaurants3: [] //无效任务审批人\n    }\n  },\n  watch: {\n    searchDeptName(val) {\n      this.$refs.serchDeptTree.filter(val)\n    },\n    //部门模糊查询\n    filterText(val) {\n      this.$refs.tree.filter(val)\n    }\n  },\n  created() {\n    this.getList()\n  },\n  mounted() {\n    this.getcompanydeptlist()\n  },\n  methods: {\n    //树形图函数\n    filterNode(value, data) {\n      if (!value) return true\n      return data.name.indexOf(value) !== -1\n    },\n    //事件类型list\n    async getList() {\n      this.listLoading = true\n      // If the Promise is rejected, the rejected value is thrown.\n      try {\n        const res = await tbeventtypeconfiglist(this.listQuery)\n        this.listLoading = false\n        this.list = res.result.rows\n        this.total = res.result.records\n        console.log(res)\n      } catch (e) {\n        this.listLoading = false\n      }\n    },\n    //获取登录人的所属公司list\n    async getcompanydeptlist() {\n      try {\n        const res = await getcompanydept(localStorage.getItem('uid'))\n        this.data = res.result\n        console.log(res)\n      } catch (e) {\n        console.log(e)\n      }\n    },\n    // 新建选中树形图的操作\n    xuan(val) {\n      console.log(val)\n      this.filterText = val.name\n      this.entityVO.departmentId = val.id\n      this.userList.deptid = val.id\n    },\n    // 编辑选中树形图的操作\n    xuan1(val) {\n      console.log(val)\n      this.entityVO.departmentName = val.name\n      this.entityVO.departmentId = val.id\n      this.userList.deptid = val.id\n    },\n    // 查询\n    // handleSearch() {\n    //   this.getList();\n    // },\n    // 点击编辑按钮触发\n    handleEdit(scope) {\n      this.dialogVisibleEdit = true\n      this.entityVO = deepClone(scope.row)\n    },\n    // 点击新增按钮触发\n    handleAdd(scope) {\n      this.dialogVisibleAdd = true\n    },\n    // 编辑功能结束，点击确定按钮触发\n    async confirmTbeventtypeconfigEdit() {\n      const res = await tbeventtypeconfigedit(this.entityVO)\n      const result = res.code\n      if (result == 20000) {\n        this.$message({\n          showClose: true,\n          message: '编辑成功',\n          type: 'success'\n        })\n        this.dialogVisibleEdit = false\n        this.getList()\n      }\n    },\n    // 新增功能结束，点击确定按钮触发\n    async confirmTbeventtypeconfigAdd() {\n      if (this.entityVO.eventType == '') {\n        this.$message({ message: '请填写事件类型', type: 'warning' })\n      } else if (this.filterText == '') {\n        this.$message({ message: '请选择部门', type: 'warning' })\n      } else if (this.entityVO.userIdA == '') {\n        this.$message({ message: '请选择响应人A', type: 'warning' })\n      } else if (this.entityVO.userIdB == '') {\n        this.$message({ message: '请选择响应人B', type: 'warning' })\n      } else if (this.entityVO.invalidUserId == '') {\n        this.$message({ message: '请选择无效任务审批人', type: 'warning' })\n      } else if (this.entityVO.createTime == '') {\n        this.$message({ message: '请选择创建时间', type: 'warning' })\n      } else {\n        const res = await tbeventtypeconfigadd(this.entityVO)\n        const result = res.code\n        if (result == 20000) {\n          this.$message({\n            showClose: true,\n            message: '新增成功',\n            type: 'success'\n          })\n          this.dialogVisibleAdd = false\n          this.getList()\n        }\n      }\n    },\n    // 点击删除按钮触发 删除生成的表的记录\n    async handleDelete(scope) {\n      const h = this.$createElement\n      this.entityVO = deepClone(scope.row)\n      this.$msgbox({\n        title: '删除消息',\n        message: h('p', null, [\n          h('span', null, '确定要删除 '),\n          h('i', { style: 'color: teal' }, '这条记录吗?')\n        ]),\n        showCancelButton: true,\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        beforeClose: async (action, instance, done) => {\n          if (action === 'confirm') {\n            const res = await tbeventtypeconfigdelete(this.entityVO)\n            if (res.code == 20000) {\n              done()\n            }\n          } else {\n            done()\n          }\n        }\n      }).then(action => {\n        this.$message({\n          showClose: true,\n          type: 'success',\n          message: '删除成功'\n        })\n        this.getList()\n      })\n    },\n    // 时间格式化\n    formatDateTime(row, column) {\n      return formatTimeToStr(row.createTime, 'yyyy-MM-dd hh:mm:ss')\n    },\n    //响应人A & 响应人B & 无效任务处理人\n    async querySearch(queryString, cb) {\n      try {\n        // const res = await getcompanyalluser(localStorage.getItem(\"uid\"));\n        const res = await getuserlist(this.userList)\n        this.restaurants1 = res.result.rows\n        for (var i = 0; i < res.result.rows.length; i++) {\n          this.$set(this.restaurants1[i], 'value', this.restaurants1[i].name)\n        }\n        var restaurants2 = queryString\n          ? this.restaurants1.filter(this.createFilter(queryString))\n          : this.restaurants1\n      } catch (e) {\n        console.log(e)\n      }\n      cb(restaurants2)\n    },\n    //筛选\n    createFilter(queryString) {\n      return restaurant => {\n        return (\n          restaurant.value.toLowerCase().indexOf(queryString.toLowerCase()) ===\n          0\n        )\n      }\n    },\n    // 分配人A\n    handleSelect(item) {\n      this.entityVO.userIdA = item.uid\n    },\n    // 分配人B\n    handleSelect1(item) {\n      this.entityVO.userIdB = item.uid\n    },\n    // 无效任务审批人\n    handleSelect2(item) {\n      this.entityVO.invalidUserId = item.uid\n    }\n  }\n}\n",null]}