{"remainingRequest":"D:\\ysyf\\iguard-vue01\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ysyf\\iguard-vue01\\src\\views\\iguard\\tbmaterialsmanage\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ysyf\\iguard-vue01\\src\\views\\iguard\\tbmaterialsmanage\\index.vue","mtime":1586159145000},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1586085021683},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\babel-loader\\lib\\index.js","mtime":1586085013966},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1586085021683},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\vue-loader\\lib\\index.js","mtime":1586085255129}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getToken } from '@/utils/auth'\nimport {\n  tbmaterialsmanagelist,\n  tbmaterialsmanageedit,\n  tbmaterialsmanagedelete,\n  tbmaterialsmanageadd,\n  tbMaterialsBrandList, //查询设备/物料品牌接口\n  tbMaterialsTypeList //查询设备/物料类型接口\n} from '@/api/iguard/tbmaterialsmanage/tbmaterialsmanage'\nimport Pagination from '@/components/Pagination' // Secondary package based on el-pagination\nimport { formatTimeToStr } from '@/utils/dateUtil'\nimport { deepClone } from '@/utils'\nconst token = getToken()\nconst entityVO = {\n  uid: localStorage.getItem('uid'),\n  id: '',\n  materialsName: '',\n  materialsTypeId: '',\n  materialsBrandId: '',\n  unit: '',\n  materialsImg: '',\n  remark: '',\n  createTime: ''\n}\n\nexport default {\n  name: `tbmaterialsmanage`,\n  components: { Pagination },\n  data() {\n    return {\n      list: null,\n      total: 0,\n      tableKey: 0,\n      listLoading: false,\n      listQuery: {\n        page: 1,\n        limit: 10,\n        id: '',\n        materialsName: '',\n        materialsTypeId: '',\n        materialsBrandId: '',\n        unit: '',\n        materialsImg: '',\n        remark: '',\n        createTime: ''\n      },\n      headersObj: { 'LinkAdmin-Token': token },\n      activeName: 'first',\n      dialogVisibleEdit: false,\n      dialogVisibleAdd: false,\n      dialogType: 'new',\n      entityVO: Object.assign({}, entityVO),\n      wuLiaoType: {\n        //查询物料/设备品牌接口\n        id: '', // 物料品牌的数据id\n        brandName: '' // 物料品牌的品牌名称\n      },\n      wuLiaoType01: {\n        //查询物料/设备类型接口\n        id: '', // 物料类型的数据id\n        typeName: '' // 物料类型名称\n      },\n      restaurants: [], //物料/设备类型List\n      restaurants00: [], //物料/设备品牌List\n      restaurants01: [], //物料/设备类型List自己新加字段value\n      restaurants02: [], //物料/设备品牌List自己新加字段value\n      state1: '', //物料/设备分类\n      state2: '', //物料/设备品牌\n      dialogImageUrl: '', //上传物料图片\n      dialogVisible: false, //上传物料图片\n      image: '' //上传物料图片\n    }\n  },\n  watch: {\n    searchDeptName(val) {\n      this.$refs.serchDeptTree.filter(val)\n    }\n  },\n  created() {\n    this.getList()\n  },\n  mounted() {},\n  methods: {\n    async getList() {\n      this.listLoading = true\n      // If the Promise is rejected, the rejected value is thrown.\n      try {\n        const res = await tbmaterialsmanagelist(this.listQuery)\n        this.listLoading = false\n        this.list = res.result.rows\n        this.total = res.result.records\n      } catch (e) {\n        this.listLoading = false\n      }\n    },\n    // 时间格式化\n    formatDateTime(row, column) {\n      return formatTimeToStr(row.createTime, 'yyyy-MM-dd hh:mm:ss')\n    },\n    // 物料/设备类型\n    async querySearch(queryString, cb) {\n      try {\n        const res = await tbMaterialsTypeList(this.wuLiaoType01)\n        this.restaurants = res.result.rows\n        for (var i = 0; i < res.result.rows.length; i++) {\n          this.$set(this.restaurants[i], 'value', this.restaurants[i].typeName)\n        }\n        var restaurants1 = queryString\n          ? this.restaurants.filter(this.createFilter(queryString))\n          : this.restaurants\n      } catch (e) {\n        console.log(e)\n      }\n      // 调用 callback 返回建议列表的数据\n      cb(restaurants1)\n    },\n    //物料/设备类型每个选中的信息\n    handleSelect(item) {\n      console.log(item)\n      this.entityVO.materialsTypeId = item.id\n    },\n    // 物料/设备品牌\n    async querySearch1(queryString, cb) {\n      try {\n        const res = await tbMaterialsBrandList(this.wuLiaoType)\n        this.restaurants00 = res.result.rows\n        for (var i = 0; i < res.result.rows.length; i++) {\n          this.$set(\n            this.restaurants00[i],\n            'value',\n            this.restaurants00[i].brandName\n          )\n        }\n        var restaurants2 = queryString\n          ? this.restaurants00.filter(this.createFilter(queryString))\n          : this.restaurants00\n      } catch (e) {\n        console.log(e)\n      }\n      // 调用 callback 返回建议列表的数据\n      cb(restaurants2)\n    },\n    //物料/设备品牌每个选中的信息\n    handleSelect1(item) {\n      console.log(item)\n      this.entityVO.materialsBrandId = item.id\n    },\n    // 设备/物料类型筛选\n    createFilter(queryString) {\n      return restaurant => {\n        return (\n          restaurant.value.toLowerCase().indexOf(queryString.toLowerCase()) ===\n          0\n        )\n      }\n    },\n    // 图片上传\n    handleRemove(file, fileList) {\n      console.log(file, fileList)\n    },\n    handlePictureCardPreview(file) {\n      this.dialogImageUrl = file.url\n      this.dialogVisible = true\n    },\n    end(response, file, fileList) {\n      console.log(file)\n      this.image = file.url\n      console.log(this.image)\n    },\n    // 查询\n    // handleSearch() {\n    //   this.getList();\n    // },\n    // 点击编辑按钮触发\n    handleEdit(scope) {\n      this.dialogVisibleEdit = true\n      this.entityVO = deepClone(scope.row)\n    },\n    // 点击新增按钮触发\n    handleAdd(scope) {\n      this.dialogVisibleAdd = true\n    },\n    // 编辑功能结束，点击确定按钮触发\n    async confirmTbmaterialsmanageEdit() {\n      const res = await tbmaterialsmanageedit(this.entityVO)\n      const result = res.code\n      if (result == 20000) {\n        this.$message({\n          showClose: true,\n          message: '编辑成功',\n          type: 'success'\n        })\n        this.dialogVisibleEdit = false\n        this.getList()\n      }\n    },\n    // 新增功能结束，点击确定按钮触发\n    async confirmTbmaterialsmanageAdd() {\n      if (this.entityVO.materialsName == '') {\n        this.$message({\n          showClose: true,\n          message: '请输入物料名称',\n          type: 'warning'\n        })\n      } else if (this.state1 == '') {\n        this.$message({\n          showClose: true,\n          message: '请输入物料分类',\n          type: 'warning'\n        })\n      } else if (this.state2 == '') {\n        this.$message({\n          showClose: true,\n          message: '请输入物料品牌',\n          type: 'warning'\n        })\n      } else if (this.entityVO.unit == '') {\n        this.$message({\n          showClose: true,\n          message: '请输入物料物料数量',\n          type: 'warning'\n        })\n      }\n      // else if (this.image == \"\") {\n      //   this.$message({\n      //     showClose: true,\n      //     message: \"请等待图片上传完成\",\n      //     type: \"warning\"\n      //   });\n      // }\n      else if (this.entityVO.remark == '') {\n        this.$message({\n          showClose: true,\n          message: '请输入备注/用途',\n          type: 'warning'\n        })\n      } else {\n        const res = await tbmaterialsmanageadd(this.entityVO)\n        const result = res.code\n        if (result == 20000) {\n          this.$message({\n            showClose: true,\n            message: '新增成功',\n            type: 'success'\n          })\n          this.dialogVisibleAdd = false\n          this.getList()\n        }\n      }\n    },\n    // 点击删除按钮触发 删除生成的表的记录\n    async handleDelete(scope) {\n      const h = this.$createElement\n      this.entityVO = deepClone(scope.row)\n      this.$msgbox({\n        title: '删除消息',\n        message: h('p', null, [\n          h('span', null, '确定要删除 '),\n          h('i', { style: 'color: teal' }, '这条记录吗?')\n        ]),\n        showCancelButton: true,\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        beforeClose: async (action, instance, done) => {\n          if (action === 'confirm') {\n            const res = await tbmaterialsmanagedelete(this.entityVO)\n            if (res.code == 20000) {\n              done()\n            }\n          } else {\n            done()\n          }\n        }\n      }).then(action => {\n        this.$message({\n          showClose: true,\n          type: 'success',\n          message: '删除成功'\n        })\n        this.getList()\n      })\n    }\n  }\n}\n",null]}