{"remainingRequest":"D:\\workspace\\selfcompanyworkspace\\line-code\\vue-link-admin-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\workspace\\selfcompanyworkspace\\line-code\\vue-link-admin-master\\src\\views\\permission\\dict.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\workspace\\selfcompanyworkspace\\line-code\\vue-link-admin-master\\src\\views\\permission\\dict.vue","mtime":1578643849000},{"path":"D:\\workspace\\selfcompanyworkspace\\line-code\\vue-link-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\workspace\\selfcompanyworkspace\\line-code\\vue-link-admin-master\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\workspace\\selfcompanyworkspace\\line-code\\vue-link-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\workspace\\selfcompanyworkspace\\line-code\\vue-link-admin-master\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {\n  dictList,\n  addDict,\n  updateDict,\n  deleteDict\n} from '@/api/permission/dict'\nimport Pagination from '@/components/Pagination' // Secondary package based on el-pagination\nimport { deepClone } from '@/utils'\nconst defaultDict = {\n  id: undefined,\n  data_type: '',\n  data_key: '',\n  data_value: '',\n  sorts: undefined,\n  description: ''\n}\nexport default {\n  name: 'Dict',\n  components: { Pagination },\n  data() {\n    return {\n      tableKey: 0,\n      list: null,\n      total: 0,\n      listLoading: false,\n      listQuery: {\n        page: 1,\n        limit: 10,\n        data_type: ''\n      },\n      dict: Object.assign({}, defaultDict),\n      dialogVisible: false,\n      dialogType: 'new',\n      rules: {\n        data_type: [{ required: true, message: '请输入type', trigger: 'blur' }],\n        data_key: [{ required: true, message: '请输入key', trigger: 'blur' }],\n        data_value: [\n          { required: true, message: '请输入value', trigger: 'blur' }\n        ]\n      }\n    }\n  },\n  created() {\n    this.getList()\n  },\n  methods: {\n    async getList() {\n      this.listLoading = true\n      // If the Promise is rejected, the rejected value is thrown.\n      try {\n        const res = await dictList(this.listQuery)\n        this.listLoading = false\n        this.list = res.result.rows\n        this.total = res.result.records\n      } catch (e) {\n        this.listLoading = false\n      }\n    },\n    handleSearch() {\n      this.getList()\n    },\n    handleCreate() {\n      this.dict = Object.assign({}, defaultDict)\n      this.dialogType = 'new'\n      this.dialogVisible = true\n    },\n    async handleEdit(scope) {\n      this.dialogType = 'edit'\n      this.dialogVisible = true\n      this.dict = deepClone(scope.row)\n    },\n    async confirmDict() {\n      const isEdit = this.dialogType === 'edit'\n      if (isEdit) {\n        await updateDict(this.dict)\n      } else {\n        await addDict(this.dict)\n      }\n      this.dialogVisible = false\n      this.$message({\n        showClose: true,\n        message: '保存成功',\n        type: 'success'\n      })\n      this.getList()\n    },\n    handleDelete({ row }) {\n      this.$confirm('确认删除吗?', '警告', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      })\n        .then(async() => {\n          await deleteDict(row.id)\n          this.$message({\n            showClose: true,\n            message: '删除成功',\n            type: 'success'\n          })\n          this.getList()\n        })\n        .catch(err => {\n          console.error(err)\n        })\n    }\n  }\n}\n",null]}