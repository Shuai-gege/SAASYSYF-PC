{"remainingRequest":"D:\\workspace\\selfcompanyworkspace\\vue-link-admin\\node_modules\\babel-loader\\lib\\index.js!D:\\workspace\\selfcompanyworkspace\\vue-link-admin\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\workspace\\selfcompanyworkspace\\vue-link-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\workspace\\selfcompanyworkspace\\vue-link-admin\\src\\views\\kejenkj\\task\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\workspace\\selfcompanyworkspace\\vue-link-admin\\src\\views\\kejenkj\\task\\index.vue","mtime":1580379748641},{"path":"D:\\workspace\\selfcompanyworkspace\\vue-link-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\workspace\\selfcompanyworkspace\\vue-link-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\workspace\\selfcompanyworkspace\\vue-link-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\workspace\\selfcompanyworkspace\\vue-link-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:\\\\workspace\\\\selfcompanyworkspace\\\\vue-link-admin\\\\node_modules\\\\@babel\\\\runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"D:\\\\workspace\\\\selfcompanyworkspace\\\\vue-link-admin\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/asyncToGenerator\"));\n\nvar _auth = require(\"@/utils/auth\");\n\nvar _task = require(\"@/api/kejenkj/task\");\n\nvar _Pagination = _interopRequireDefault(require(\"@/components/Pagination\"));\n\nvar _dateUtil = require(\"@/utils/dateUtil\");\n\nvar _utils = require(\"@/utils\");\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// Secondary package based on el-pagination\nvar token = (0, _auth.getToken)();\nvar taskVO = {\n  nickName: '',\n  id: '',\n  publishUid: '',\n  publishDate: '',\n  title: '',\n  taskContent: '',\n  taskPrice: '',\n  startTime: '',\n  deadLine: '',\n  peopleNum: '',\n  fileName: '',\n  fileUrl: '',\n  status: '',\n  examStatus: '',\n  examTime: '',\n  remark: ''\n};\nvar _default = {\n  name: \"Task\",\n  components: {\n    Pagination: _Pagination.default\n  },\n  data: function data() {\n    return {\n      list: null,\n      total: 0,\n      tableKey: 0,\n      listLoading: false,\n      listQuery: {\n        page: 1,\n        limit: 10,\n        title: '',\n        // 任务名称\n        taskContent: '',\n        // 任务描述\n        publishDate: '',\n        // 发布时间\n        nickName: '',\n        // 发布人\n        examineStatus: '' // 审核标记\n\n      },\n      headersObj: {\n        'LinkAdmin-Token': token\n      },\n      activeName: 'first',\n      dialogVisible: false,\n      dialogType: 'new',\n      taskVO: Object.assign({}, taskVO),\n      rules: {\n        examineStatus: [{\n          required: true,\n          message: '请选择审核状态',\n          trigger: 'change'\n        }]\n      }\n    };\n  },\n  watch: {\n    searchDeptName: function searchDeptName(val) {\n      this.$refs.serchDeptTree.filter(val);\n    }\n  },\n  created: function created() {\n    this.getList();\n  },\n  methods: {\n    getList: function () {\n      var _getList = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var res;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.listLoading = true; // If the Promise is rejected, the rejected value is thrown.\n\n                _context.prev = 1;\n                _context.next = 4;\n                return (0, _task.taskList)(this.listQuery);\n\n              case 4:\n                res = _context.sent;\n                this.listLoading = false;\n                this.list = res.result.rows;\n                this.total = res.result.records;\n                _context.next = 13;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](1);\n                this.listLoading = false;\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 10]]);\n      }));\n\n      function getList() {\n        return _getList.apply(this, arguments);\n      }\n\n      return getList;\n    }(),\n    // 查询\n    handleSearch: function handleSearch() {\n      this.getList();\n    },\n    // 发布时间\n    formatDateTime: function formatDateTime(row, column) {\n      return (0, _dateUtil.formatTimeToStr)(row.publishDate, 'yyyy-MM-dd hh:mm:ss');\n    },\n    // 开始时间\n    formatDateTimeStart: function formatDateTimeStart(row, column) {\n      return (0, _dateUtil.formatTimeToStr)(row.startTime, 'yyyy-MM-dd hh:mm:ss');\n    },\n    // 结束时间\n    formatDateTimeEnd: function formatDateTimeEnd(row, column) {\n      return (0, _dateUtil.formatTimeToStr)(row.deadLine, 'yyyy-MM-dd hh:mm:ss');\n    },\n    // 审核时间\n    formatDateTimeExam: function formatDateTimeExam(row, column) {\n      return (0, _dateUtil.formatTimeToStr)(row.examTime, 'yyyy-MM-dd hh:mm:ss');\n    },\n    formatDateTimeTemp: function formatDateTimeTemp(tt) {\n      return (0, _dateUtil.formatTimeToStr)(tt, 'yyyy-MM-dd hh:mm:ss');\n    },\n    // 审核标记转换\n    shenhebj: function shenhebj(row, column) {\n      var tt = row.examineFlag;\n\n      if (tt == '0') {\n        return '未审核';\n      }\n\n      if (tt == '1') {\n        return '审核通过';\n      }\n\n      if (tt == '2') {\n        return '审核未通过';\n      }\n    },\n    // 任务状态转换\n    taskStatus: function taskStatus(row, column) {\n      var tt = row.status;\n\n      if (tt == '0') {\n        return '已发布';\n      }\n\n      if (tt == '1') {\n        return '已关闭';\n      }\n    },\n    // 点击编辑按钮触发\n    handleEdit: function handleEdit(scope) {\n      debugger;\n      this.dialogVisible = true;\n      this.taskVO = (0, _utils.deepClone)(scope.row);\n      var tt = this.taskVO.publishDate;\n      this.taskVO.publishDate = this.formatDateTimeTemp(tt);\n    },\n    // 编辑功能结束，点击确定按钮触发\n    confirmTask: function () {\n      var _confirmTask = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var examStatus, remark, res, result;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                examStatus = this.taskVO.examStatus;\n                remark = this.taskVO.remark;\n\n                if (!(examStatus == 2 && (remark == null || remark == undefined || remark.trim() == ''))) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                this.$message({\n                  showClose: true,\n                  message: '审核未通过,必须备注原因哦~',\n                  type: 'error'\n                });\n                return _context2.abrupt(\"return\");\n\n              case 5:\n                this.taskVO.publishDate = this.formatDateTimeTemp(this.taskVO.publishDate);\n                this.taskVO.examTime = this.formatDateTimeTemp(this.taskVO.examTime);\n                _context2.next = 9;\n                return (0, _task.editTask)(this.taskVO);\n\n              case 9:\n                res = _context2.sent;\n                result = res.result;\n\n                if (result) {\n                  this.$message({\n                    showClose: true,\n                    message: '编辑成功',\n                    type: 'success'\n                  });\n                  this.dialogVisible = false;\n                  this.getList();\n                }\n\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function confirmTask() {\n        return _confirmTask.apply(this, arguments);\n      }\n\n      return confirmTask;\n    }()\n  }\n};\nexports.default = _default;",null]}