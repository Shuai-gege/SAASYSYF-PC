{"remainingRequest":"D:\\workspace\\selfcompanyworkspace\\vue-link-admin\\node_modules\\babel-loader\\lib\\index.js!D:\\workspace\\selfcompanyworkspace\\vue-link-admin\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\workspace\\selfcompanyworkspace\\vue-link-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\workspace\\selfcompanyworkspace\\vue-link-admin\\src\\views\\permission\\user.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\workspace\\selfcompanyworkspace\\vue-link-admin\\src\\views\\permission\\user.vue","mtime":1578809352394},{"path":"D:\\workspace\\selfcompanyworkspace\\vue-link-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\workspace\\selfcompanyworkspace\\vue-link-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\workspace\\selfcompanyworkspace\\vue-link-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\workspace\\selfcompanyworkspace\\vue-link-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:\\\\workspace\\\\selfcompanyworkspace\\\\vue-link-admin\\\\node_modules\\\\@babel\\\\runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.function.name\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"D:\\\\workspace\\\\selfcompanyworkspace\\\\vue-link-admin\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/asyncToGenerator\"));\n\nvar _vueTreeselect = _interopRequireDefault(require(\"@riophae/vue-treeselect\"));\n\nrequire(\"@riophae/vue-treeselect/dist/vue-treeselect.css\");\n\nvar _index = _interopRequireDefault(require(\"@/directive/permission/index.js\"));\n\nvar _user = require(\"@/api/permission/user\");\n\nvar _department = require(\"@/api/permission/department\");\n\nvar _job = require(\"@/api/permission/job\");\n\nvar _role = require(\"@/api/permission/role\");\n\nvar _utils = require(\"@/utils\");\n\nvar _Pagination = _interopRequireDefault(require(\"@/components/Pagination\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// 权限判断指令\n// Secondary package based on el-pagination\nvar defaultUser = {\n  uid: '',\n  name: '',\n  password: 123456,\n  vserName: '',\n  mobile: '',\n  state: 1,\n  email: '',\n  deptid: undefined,\n  jobid: undefined,\n  jobName: '',\n  deptName: '',\n  roleIds: []\n};\nvar _default = {\n  name: 'User',\n  components: {\n    Pagination: _Pagination.default,\n    Treeselect: _vueTreeselect.default\n  },\n  directives: {\n    permission: _index.default\n  },\n  data: function data() {\n    return {\n      tableKey: 0,\n      list: null,\n      total: 0,\n      listLoading: false,\n      listQuery: {\n        page: 1,\n        limit: 10,\n        vserName: '',\n        name: '',\n        mobile: '',\n        deptid: undefined,\n        state: undefined\n      },\n      searchDeptName: '',\n      stateOptions: [{\n        label: '禁用',\n        value: 0\n      }, {\n        label: '启用',\n        value: 1\n      }],\n      user: Object.assign({}, defaultUser),\n      defaultProps: {\n        children: 'childrens',\n        label: 'name'\n      },\n      departments: [],\n      roles: [],\n      activeName: 'first',\n      dialogVisible: false,\n      dialogType: 'new',\n      rules: {\n        name: [{\n          required: true,\n          message: '请输入账号',\n          trigger: 'blur'\n        }, {\n          min: 2,\n          max: 20,\n          message: '长度在 2 到 20 个字符',\n          trigger: 'blur'\n        }],\n        password: [{\n          required: true,\n          message: '请输入密码',\n          trigger: 'blur'\n        }, {\n          min: 2,\n          max: 20,\n          message: '长度在 2 到 20 个字符',\n          trigger: 'blur'\n        }],\n        vserName: [{\n          required: true,\n          message: '请输入用户名',\n          trigger: 'blur'\n        }, {\n          min: 2,\n          max: 10,\n          message: '长度在 2 到 10 个字符',\n          trigger: 'blur'\n        }],\n        deptid: [{\n          required: true,\n          message: '请选择部门',\n          trigger: 'change'\n        }],\n        state: [{\n          required: true,\n          message: '请选择状态',\n          trigger: 'change'\n        }]\n      }\n    };\n  },\n  watch: {\n    searchDeptName: function searchDeptName(val) {\n      this.$refs.serchDeptTree.filter(val);\n    }\n  },\n  created: function created() {},\n  mounted: function mounted() {\n    this.getList();\n    this.getDepartments();\n    this.getJobs();\n    this.getRoles();\n  },\n  methods: {\n    getList: function () {\n      var _getList = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var res;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.listLoading = true; // If the Promise is rejected, the rejected value is thrown.\n\n                _context.prev = 1;\n                _context.next = 4;\n                return (0, _user.userList)(this.listQuery);\n\n              case 4:\n                res = _context.sent;\n                this.listLoading = false;\n                this.list = res.result.rows;\n                this.total = res.result.records;\n                _context.next = 13;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](1);\n                this.listLoading = false;\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 10]]);\n      }));\n\n      function getList() {\n        return _getList.apply(this, arguments);\n      }\n\n      return getList;\n    }(),\n    handleSearch: function handleSearch() {\n      this.getList();\n    },\n    formatDept: function formatDept(row, column) {\n      return row.deptName + ' / ' + row.jobName;\n    },\n    formatRole: function formatRole(row, column) {\n      var roleNames = [];\n      row.roles.forEach(function (role) {\n        roleNames.push(role.name);\n      });\n      return roleNames.join(' , ');\n    },\n    // 用户状态修改\n    handleStateChange: function handleStateChange(row) {\n      var _this = this;\n\n      var text = row.state === 1 ? '启用' : '禁用';\n      this.$confirm('确认要 [' + text + '] [' + row.name + '] 用户吗?', '警告', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(\n      /*#__PURE__*/\n      (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return (0, _user.updateState)({\n                  uid: row.uid,\n                  state: row.state\n                });\n\n              case 2:\n                _this.$message({\n                  message: text + '成功',\n                  type: 'success'\n                });\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))).catch(function (err) {\n        console.error(err);\n        row.state = row.state === 0 ? 1 : 0;\n      });\n    },\n    getDepartments: function () {\n      var _getDepartments = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3() {\n        var res, result;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return (0, _department.departments)();\n\n              case 2:\n                res = _context3.sent;\n                result = res.result;\n                this.diGuiTree(result);\n                this.departments = [{\n                  id: 0,\n                  name: '部门树',\n                  childrens: result\n                }];\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getDepartments() {\n        return _getDepartments.apply(this, arguments);\n      }\n\n      return getDepartments;\n    }(),\n    getJobs: function () {\n      var _getJobs = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4() {\n        var res;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return (0, _job.jobs)();\n\n              case 2:\n                res = _context4.sent;\n                this.jobs = res.result;\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getJobs() {\n        return _getJobs.apply(this, arguments);\n      }\n\n      return getJobs;\n    }(),\n    getRoles: function () {\n      var _getRoles = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee5() {\n        var res;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return (0, _role.roles)();\n\n              case 2:\n                res = _context5.sent;\n                this.roles = res.result;\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getRoles() {\n        return _getRoles.apply(this, arguments);\n      }\n\n      return getRoles;\n    }(),\n    clearSearchDept: function clearSearchDept() {\n      this.listQuery.deptid = undefined;\n    },\n    diGuiTree: function diGuiTree(item) {\n      var _this2 = this;\n\n      // 递归便利树结构\n      item.forEach(function (item) {\n        item.childrens === '' || item.childrens === undefined || item.childrens === null ? delete item.childrens : _this2.diGuiTree(item.childrens);\n      });\n    },\n    normalizer: function normalizer(node) {\n      return {\n        id: node.id,\n        label: node.name,\n        children: node.childrens\n      };\n    },\n    queryJobSearch: function queryJobSearch(queryString, cb) {\n      var jobs = this.jobs;\n      var results = queryString ? jobs.filter(this.createJobFilter(queryString)) : jobs; // 调用 callback 返回建议列表的数据\n\n      cb(results);\n    },\n    createJobFilter: function createJobFilter(queryString) {\n      return function (jobs) {\n        return jobs.name.toLowerCase().indexOf(queryString.toLowerCase()) === 0;\n      };\n    },\n    handleJobSelect: function handleJobSelect(item) {\n      this.user.jobid = item.id;\n      this.user.jobName = item.name;\n    },\n    handleCreate: function handleCreate() {\n      this.dialogType = 'new';\n      this.activeName = 'first';\n      this.dialogVisible = true;\n      this.user = Object.assign({}, defaultUser);\n    },\n    handleEdit: function handleEdit(scope) {\n      this.dialogType = 'edit';\n      this.activeName = 'first';\n      this.dialogVisible = true;\n      scope.row.roleIds = [];\n      this.user = (0, _utils.deepClone)(scope.row);\n\n      if (this.user.roles) {\n        var roleIds = this.user.roleIds;\n        this.user.roles.forEach(function (role) {\n          roleIds.push(role.id);\n        });\n      }\n    },\n    confirmUser: function () {\n      var _confirmUser = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee6() {\n        var isEdit;\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                isEdit = this.dialogType === 'edit';\n\n                if (!isEdit) {\n                  _context6.next = 6;\n                  break;\n                }\n\n                _context6.next = 4;\n                return (0, _user.updateUser)(this.user);\n\n              case 4:\n                _context6.next = 8;\n                break;\n\n              case 6:\n                _context6.next = 8;\n                return (0, _user.addUser)(this.user);\n\n              case 8:\n                this.dialogVisible = false;\n                this.$message({\n                  showClose: true,\n                  message: '保存成功',\n                  type: 'success'\n                });\n                this.getList();\n\n              case 11:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function confirmUser() {\n        return _confirmUser.apply(this, arguments);\n      }\n\n      return confirmUser;\n    }(),\n    // 节点单击事件\n    handleSearchDeptNode: function handleSearchDeptNode(data) {\n      this.isShowSelect = false;\n      this.listQuery.deptid = data.id;\n      this.getList();\n    },\n    // 筛选节点\n    filterNode: function filterNode(value, data) {\n      if (!value) return true;\n      return data.name.indexOf(value) !== -1;\n    }\n  }\n};\nexports.default = _default;",null]}