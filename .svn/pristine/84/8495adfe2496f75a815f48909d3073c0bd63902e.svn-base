{"remainingRequest":"D:\\ysyf\\vue-link-admin-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ysyf\\vue-link-admin-master\\src\\views\\angel\\person\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ysyf\\vue-link-admin-master\\src\\views\\angel\\person\\index.vue","mtime":1581928189716},{"path":"D:\\ysyf\\vue-link-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\ysyf\\vue-link-admin-master\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\ysyf\\vue-link-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\ysyf\\vue-link-admin-master\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {getToken} from '@/utils/auth'\nimport Treeselect from '@riophae/vue-treeselect'\nimport {\n    personlist, personedit, persondelete, personadd\n} from '@/api/angel/person/person'\nimport permission from '@/directive/permission/index.js' // 权限判断指令\nimport {\n    departments, diGuiTree\n} from '@/api/permission/department'\nimport Pagination from '@/components/Pagination' // Secondary package based on el-pagination\nimport {formatTimeToStr} from '@/utils/dateUtil'\nimport {deepClone} from '@/utils'\nimport {\n    roles\n} from '@/api/permission/role'\n\nconst token = getToken()\nconst entityVO = {\n    personId: '',\n    personNo: '',\n    TenantId: '',\n    departmentId: '',\n    personName: '',\n    tagId: '',\n    tagMac: '',\n    personSex: '',\n    personPhone: '',\n    personIdentityno: '',\n    personRole: '',\n    personApp: '',\n    locationBuildingid: '',\n    locationFloor: '',\n    locationPoiid: '',\n}\n\nexport default {\n    name: `person`,\n    components: {Pagination, Treeselect},\n    directives: {permission},\n    data() {\n        return {\n            defaultProps: {\n                children: 'childrens',\n                label: 'name'\n            },\n            list: null,\n            listRole: null,\n            total: 0,\n            tableKey: 0,\n            listLoading: false,\n            departments: [], // 部门列表\n            listQuery: {\n                page: 1,\n                limit: 10,\n                personId: '',\n                personNo: '',\n                TenantId: '',\n                departmentId: '',\n                personName: '',\n                tagId: '',\n                tagMac: '',\n                personSex: '',\n                personPhone: '',\n                personIdentityno: '',\n                personRole: '',\n                personApp: '',\n                locationBuildingid: '',\n                locationFloor: '',\n                locationPoiid: '',\n            },\n            headersObj: {'LinkAdmin-Token': token},\n            activeName: 'first',\n            dialogVisibleEdit: false,\n            dialogVisibleAdd: false,\n            dialogType: 'new',\n            entityVO: Object.assign({}, entityVO),\n        }\n    },\n    watch: {\n        searchDeptName(val) {\n            this.$refs.serchDeptTree.filter(val)\n        }\n    },\n    created() {\n        this.getList()\n        this.getDepartments();\n        this.getRoleList();\n    },\n    methods: {\n        async getList() {\n            this.listLoading = true\n            // If the Promise is rejected, the rejected value is thrown.\n            try {\n                const res = await personlist(this.listQuery)\n                this.listLoading = false\n                this.list = res.result.rows\n                this.total = res.result.records\n            } catch (e) {\n                this.listLoading = false\n            }\n        },\n        async getRoleList(){\n            this.listLoading = true\n            // If the Promise is rejected, the rejected value is thrown.\n            try {\n                const res = await roles()\n                this.listLoading = false\n                this.listRole = res.result\n              //  this.total = res.result.records\n            } catch (e) {\n                this.listLoading = false\n            }\n        },\n        // 查询部门列表\n        async getDepartments() {\n            const res = await departments()\n            const result = res.result\n            this.diGuiTree(result)\n            this.departments = [{id: 0, name: '部门树', childrens: result}]\n        },\n        diGuiTree(item) {\n            // 递归便利树结构\n            item.forEach(item => {\n                item.childrens === '' ||\n                item.childrens === undefined ||\n                item.childrens === null\n                    ? delete item.childrens\n                    : this.diGuiTree(item.childrens)\n            })\n        },\n        filterNode(value, data) {\n            if (!value) return true\n            return data.name.indexOf(value) !== -1\n        },\n        // 查询\n        handleSearch() {\n            this.getList()\n        },\n        // 点击编辑按钮触发\n        handleEdit(scope) {\n            this.dialogVisibleEdit = true\n            this.entityVO = deepClone(scope.row)\n        },\n        // 点击新增按钮触发\n        handleAdd(scope) {\n            this.dialogVisibleAdd = true\n        },\n        // 编辑功能结束，点击确定按钮触发\n        async confirmPersonEdit() {\n            const res = await personedit(this.entityVO);\n            const result = res.code;\n            if (result == 20000) {\n                this.$message({\n                    showClose: true,\n                    message: '编辑成功',\n                    type: 'success'\n                })\n                this.dialogVisibleEdit = false;\n                this.getList();\n            }\n        },\n        // 新增功能结束，点击确定按钮触发\n        async confirmPersonAdd() {\n            const res = await personadd(this.entityVO);\n            const result = res.code;\n            if (result == 20000) {\n                this.$message({\n                    showClose: true,\n                    message: '新增成功',\n                    type: 'success'\n                })\n                this.dialogVisibleAdd = false;\n                this.getList();\n            }\n        },\n        // 点击删除按钮触发 删除生成的表的记录\n        async handleDelete(scope) {\n            const h = this.$createElement;\n            this.entityVO = deepClone(scope.row)\n            this.$msgbox({\n                title: '删除消息',\n                message: h('p', null, [\n                    h('span', null, '确定要删除 '),\n                    h('i', {style: 'color: teal'}, '这条记录吗?')\n                ]),\n                showCancelButton: true,\n                confirmButtonText: '确定',\n                cancelButtonText: '取消',\n                beforeClose: async (action, instance, done) => {\n                    if (action === 'confirm') {\n                        const res = await persondelete(this.entityVO);\n                        if (res.code == 20000) {\n                            done();\n                        }\n                    } else {\n                        done();\n                    }\n                }\n            }).then(action => {\n                this.$message({\n                    showClose: true,\n                    type: 'success',\n                    message: '删除成功'\n                });\n                this.getList();\n            });\n        },\n        // 性别转换 性别 F--女性，M--男性\n        sexStatus(row, column) {\n            const sex = row.personSex;\n            if (sex == \"F\" || sex == '2') {\n                return '女';\n            }\n            if (sex == \"M\" || sex == '1') {\n                return '男';\n            }\n        },\n        // 角色转换  角色  1-普通，2-前台，3-主管\n        roleStatus(row, column) {\n            const role = row.personRole;\n            if (role == '1') {\n                return '普通';\n            }\n            if (role == '2') {\n                return '前台';\n            }\n            if (role == '3') {\n                return '主管';\n            }\n        },\n        // visitor-访客，patrol-巡更\n        personAppStatus(row, column) {\n            const person_app = row.personApp;\n            if (person_app == \"visitor\" || person_app == '1') {\n                return '访客';\n            }\n            if (person_app == \"patrol\" || person_app == '2') {\n                return '巡更';\n            }\n        },\n        //select框值改变时候触发的事件\n        /*selectChange(e){\n            var arrNew = [];\n            var dataLength = this.departments.length;\n            var eleng = e.length;\n            for(let i = 0; i< dataLength ;i++){\n                for(let j = 0; j < eleng; j++){\n                    if(e[j] === this.departments[i].name){\n                        arrNew.push(this.departments[i])\n                    }\n                }\n            }\n            this.$refs.tree.setCheckedNodes(arrNew);//设置勾选的值\n        },\n        handleCheckChange() {\n            let res = this.$refs.tree.getCheckedNodes(true, true); //这里两个true，1. 是否只是叶子节点 2. 是否包含半选节点（就是使得选择的时候不包含父节点）\n            let arrLabel = [];\n            let arr = [];\n            res.forEach(item => {\n                arrLabel.push(item.name);\n                arr.push(item);\n            });\n            this.departments = arr;\n            this.listQuery.departmentId = arrLabel;\n        }*/\n    }\n}",null]}