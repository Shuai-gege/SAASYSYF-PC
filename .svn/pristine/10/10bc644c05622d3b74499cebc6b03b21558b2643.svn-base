{"remainingRequest":"D:\\ysyf\\iguard-vue01\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ysyf\\iguard-vue01\\src\\views\\permission\\role.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ysyf\\iguard-vue01\\src\\views\\permission\\role.vue","mtime":1587087040913},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1586085021683},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\babel-loader\\lib\\index.js","mtime":1586085013966},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1586085021683},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\vue-loader\\lib\\index.js","mtime":1586085255129}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport permission from '@/directive/permission/index.js' // 权限判断指令\nimport {\n  roleList,\n  addRole,\n  updateRole,\n  deleteRole,\n  saveDataScope,\n  queryDataScope\n} from '@/api/permission/role'\nimport { permissions, permissionsByRole, subPermissions } from '@/api/permission/permission'\nimport { subDepartments } from '@/api/permission/department'\nimport { dictInfo } from '@/api/permission/dict'\nimport Pagination from '@/components/Pagination' // Secondary package based on el-pagination\nimport { deepClone } from '@/utils'\nconst defaultRole = {\n  id: undefined,\n  name: '',\n  description: '',\n  permIds: [],\n  data_scope: undefined,\n  deptIds: []\n}\nexport default {\n  name: 'Role',\n  components: { Pagination },\n  directives: { permission },\n  data() {\n    return {\n      tableKey: 0,\n      list: null,\n      total: 0,\n      listLoading: false,\n      listQuery: {\n        page: 1,\n        limit: 10,\n        name: ''\n      },\n      role: Object.assign({}, defaultRole),\n      dialogVisible: false,\n      dialogType: 'new',\n      checkStrictly: false,\n      defaultProps: {\n        children: 'childrens',\n        label: 'name'\n      },\n      permissions: [],\n      permissionsByRole: [],\n      dataScopeDialogVisible: false,\n      departments: [],\n      dataScopes: [],\n      rules: {\n        name: [\n          { required: true, message: '请输入角色名', trigger: 'blur' },\n          { min: 1, max: 15, message: '长度在 1 到 15 个字符', trigger: 'blur' }\n        ]\n      }\n    }\n  },\n  created() {\n    this.getList()\n    this.getPermissions()\n    this.getDepartments()\n    this.getDataScopes()\n  },\n  methods: {\n    async getList() {\n      this.listLoading = true\n      // If the Promise is rejected, the rejected value is thrown.\n      try {\n        const res = await roleList(this.listQuery)\n        this.listLoading = false\n        this.list = res.result.rows\n        this.total = res.result.records\n      } catch (e) {\n        this.listLoading = false\n      }\n    },\n    formatDataScope(row, column) {\n      var val = ''\n      if (row.data_scope != null) {\n        for (var item of this.dataScopes) {\n          if (parseInt(item.data_key) === row.data_scope) {\n            val = item.data_value\n            break\n          }\n        }\n      }\n      return val\n    },\n    async getPermissions() {\n      const res = await subPermissions();\n      this.permissions = res.result\n    },\n    async getPermissionsByRole(roleId) {\n      const res = await permissionsByRole(roleId);\n      this.permissionsByRole = res.result\n    },\n    async getDataScopes() {\n      const res = await dictInfo('data_scope')\n      this.dataScopes = res.result\n    },\n    async getDepartments() {\n      const res = await subDepartments()\n      this.departments = res.result\n    },\n    handleSearch() {\n      this.getList()\n    },\n    // 权限树\n    checkPermissionTree(currentObj, treeStatus) {\n      const currentNode = this.$refs.tree.getNode(currentObj)\n      // 用于：父子节点严格互不关联时，父节点勾选变化时通知子节点同步变化，实现单向关联。\n      const selected = treeStatus.checkedKeys.indexOf(currentNode.key) // -1未选中\n      // 选中\n      if (selected !== -1) {\n        // 子节点只要被选中父节点就被选中\n        this.selectedParent(currentNode)\n        // 统一处理子节点为相同的勾选状态\n        this.uniteChildSame(currentNode, true)\n      } else {\n        // 未选中 处理子节点全部未选中\n        if (currentNode.childNodes) {\n          if (currentNode.childNodes.length !== 0) {\n            this.uniteChildSame(currentNode, false)\n          }\n        }\n      }\n    },\n    // 统一处理子节点为相同的勾选状态\n    uniteChildSame(currentNode, isSelected) {\n      this.$refs.tree.setChecked(currentNode.key, isSelected)\n      if (currentNode.childNodes) {\n        for (let i = 0; i < currentNode.childNodes.length; i++) {\n          this.uniteChildSame(currentNode.childNodes[i], isSelected)\n        }\n      }\n    },\n    // 统一处理父节点为选中\n    selectedParent(currentNode) {\n      if (currentNode.parent.key !== undefined) {\n        this.$refs.tree.setChecked(currentNode.parent, true)\n        this.selectedParent(currentNode.parent)\n      }\n    },\n    handleCreate() {\n      this.role = Object.assign({}, defaultRole)\n      if (this.$refs.tree) {\n        this.$refs.tree.setCheckedNodes([])\n      }\n      this.checkStrictly = true\n      this.dialogType = 'new'\n      this.dialogVisible = true\n    },\n    generateArr(routes) {\n      let data = []\n      routes.forEach(route => {\n        data.push(route)\n        if (route.childrens) {\n          const temp = this.generateArr(route.childrens)\n          if (temp.length > 0) {\n            data = [...data, ...temp]\n          }\n        }\n      })\n      return data\n    },\n    async handleEdit(scope) {\n      this.dialogType = 'edit'\n      this.dialogVisible = true\n      this.checkStrictly = true\n      this.role = deepClone(scope.row)\n      const res = await permissionsByRole(this.role.id)\n      this.permissionsByRole = res.result\n      this.$nextTick(() => {\n        if (this.permissionsByRole != null) {\n          this.$refs.tree.setCheckedNodes(\n            this.generateArr(this.permissionsByRole)\n          )\n        } else {\n          this.$refs.tree.setCheckedNodes([])\n        }\n      })\n    },\n    async confirmRole() {\n      const isEdit = this.dialogType === 'edit'\n      this.role.permIds = this.$refs.tree.getCheckedKeys()\n      if (isEdit) {\n        await updateRole(this.role)\n      } else {\n        await addRole(this.role)\n      }\n      this.dialogVisible = false\n      this.$message({\n        showClose: true,\n        message: '保存成功',\n        type: 'success'\n      })\n      this.getList()\n    },\n    handleDelete({ row }) {\n      this.$confirm('确认删除角色?', '警告', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      })\n        .then(async() => {\n          await deleteRole(row.id)\n          this.$message({\n            showClose: true,\n            message: '删除成功',\n            type: 'success'\n          })\n          this.getList()\n        })\n        .catch(err => {\n          console.error(err)\n        })\n    },\n    async setCheckDeptTree(roleId) {\n      const res = await queryDataScope(roleId)\n      this.$refs.deptTree.setCheckedKeys(res.result)\n    },\n    handleDataScope(row) {\n      this.role = deepClone(row)\n      if (this.$refs.deptTree) {\n        this.$refs.deptTree.setCheckedKeys([])\n      }\n      if (row.data_scope === 2) {\n        this.setCheckDeptTree(row.id)\n      }\n      this.dataScopeDialogVisible = true\n    },\n    /** 提交按钮（数据权限） */\n    async submitDataScope() {\n      if (this.role.id) {\n        this.role.deptIds = this.$refs.deptTree.getCheckedKeys()\n        await saveDataScope(this.role)\n        this.dataScopeDialogVisible = false\n        this.$message({\n          showClose: true,\n          message: '操作成功',\n          type: 'success'\n        })\n        this.getList()\n      }\n    }\n  }\n}\n",null]}