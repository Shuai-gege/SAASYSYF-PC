{"remainingRequest":"D:\\ysyf\\iguard-vue01\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ysyf\\iguard-vue01\\src\\views\\iguard\\device\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ysyf\\iguard-vue01\\src\\views\\iguard\\device\\index.vue","mtime":1587007768251},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\babel-loader\\lib\\index.js","mtime":1586085013966},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1586085021683},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\vue-loader\\lib\\index.js","mtime":1586085255129}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport permission from '@/directive/permission/index.js' // 权限判断指令\nimport {\n  deviceList,\n  addDevice,\n  updateDevice,\n  deleteDevice,\n  exportQR\n} from '@/api/iguard/device/device'\n\nimport {\n  dictInfo\n} from '@/api/permission/dict'\n\nimport {\n  getCompanyBuildingLocation,\n  getBuildingLocationFloor\n} from '@/api/iguard/tbbuildinglocation/tbbuildinglocation'\n\nimport Pagination from '@/components/Pagination' // Secondary package based on el-pagination\nimport { deepClone } from '@/utils'\nconst defaultDeviceInfo= {\n  id: undefined,\n  name: '',\n  type: undefined,\n  brand: undefined,\n  model: undefined,\n  building: undefined,\n  floor: undefined,\n  putTime: undefined,\n  remark:'',\n  imgUrl:'',\n};\nexport default {\n  name: 'DeviceInfo',\n  components: { Pagination },\n  directives: { permission },\n  data() {\n    return {\n      tableKey: 0,\n      list: null,\n      total: 0,\n      listLoading: false,\n      listQuery: {\n        page: 1,\n        limit: 10,\n        name: ''\n      },\n      deviceInfo: Object.assign({}, defaultDeviceInfo),\n      dialogVisible: false,\n      dialogType: 'new',\n      deviceTypes:null,\n      deviceBrands:null,\n      deviceModels:null,\n      buildings:null,\n      floors:null,\n      dialogImageUrl: '',\n      dialogImageVisible: false,\n      uploadPath: process.env.VUE_APP_BASE_API_URL + '/public/rest/img/upload',\n      baseUrl:process.env.VUE_APP_BASE_API_URL,\n      rules: {\n        name: [\n          { required: true, message: '请输入岗位名', trigger: 'blur' },\n          { min: 2, max: 15, message: '长度在 2 到 15 个字符', trigger: 'blur' }\n        ],\n        state: [{ required: true, message: '请选择状态', trigger: 'change' }]\n      }\n    }\n  },\n  created() {\n    this.getList();\n\n    this.getDeviceTypes();\n    this.getDeviceBrands();\n    this.getDeviceModels();\n    this.getBuildings();\n  },\n  methods: {\n    async getList() {\n      this.listLoading = true;\n      try {\n        const res = await deviceList(this.listQuery);\n        this.listLoading = false;\n        this.list = res.result.rows;\n        this.total = res.result.records\n      } catch (e) {\n        this.listLoading = false\n      }\n    },\n\n    async getDeviceTypes() {\n      this.listLoading = true\n      try {\n        const res = await dictInfo(\"device_type\");\n        this.listLoading = false\n        this.deviceTypes = res.result;\n      } catch (e) {\n        this.listLoading = false\n      }\n    },\n\n    async getDeviceBrands() {\n      const res = await dictInfo(\"device_brand\");\n      const result = res.result;\n      this.deviceBrands = result;\n    },\n\n    async getDeviceModels() {\n      this.listLoading = true;\n      try {\n        const res = await dictInfo(\"device_model\");\n        this.listLoading = false;\n        this.deviceModels = res.result;\n      } catch (e) {\n        this.listLoading = false\n      }\n    },\n\n\n    async getBuildings() {\n      this.listLoading = true;\n      try {\n        const res = await getCompanyBuildingLocation();\n        this.listLoading = false;\n        this.buildings = res.result;\n      } catch (e) {\n        this.listLoading = false\n      }\n    },\n\n    async getFloors(vId){\n      this.listLoading = true;\n      try {\n        const res =  await getBuildingLocationFloor(vId);\n        this.listLoading = false;\n        this.floors = res.result;\n      } catch (e) {\n        this.listLoading = false\n      }\n    },\n\n    handleSearch() {\n      this.getList()\n    },\n\n\n    handlePictureSuccess(response, file, fileList){\n      this.deviceInfo.imgUrl = this.baseUrl + \"/public/rest/img/\"+ response.result;\n    },\n\n    handlePictureRemove(file, fileList) {\n      console.log(file, fileList);\n    },\n\n    handlePictureCardPreview(file) {\n      this.dialogImageUrl = file.url;\n      this.dialogImageVisibleVisible = true;\n    },\n\n\n    formatType(row, column) {\n      return row.typeName;\n    },\n    formatBrand(row, column){\n      return row.brandName;\n    },\n\n    formatModel(row, column){\n      return row.modelName;\n    },\n\n    formatAddress(row, column){\n      return row.buildingName + '-' + row.floorName;\n    },\n\n    handleCreate() {\n      this.dialogType = 'new';\n      this.dialogVisible = true\n      this.deviceInfo = Object.assign({}, defaultDeviceInfo);\n    },\n    handleEdit(scope) {\n      this.dialogType = 'edit';\n      this.dialogVisible = true;\n      this.checkStrictly = true;\n      this.deviceInfo = deepClone(scope.row);\n    },\n\n\n    async handleExportQR() {\n      const res =  await exportQR(this.listQuery);\n      window.location.href = this.baseUrl + \"/public/rest/qrZip/\" + res.result;\n    },\n\n\n\n    async confirmDeviceInfo() {\n      const isEdit = this.dialogType === 'edit'\n      if (isEdit) {\n        await updateDevice(this.deviceInfo)\n      } else {\n        await addDevice(this.deviceInfo)\n      }\n      this.dialogVisible = false\n      this.$message({\n        showClose: true,\n        message: '保存成功',\n        type: 'success'\n      });\n      this.getList();\n    },\n\n    handleDelete({ row }) {\n      this.$confirm('确认删除?', '警告', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      })\n        .then(async() => {\n          await deleteDevice(row.id)\n          this.$message({\n            showClose: true,\n            message: '删除成功',\n            type: 'success'\n          })\n          this.getList()\n        })\n        .catch(err => {\n          console.error(err)\n        })\n    }\n  }\n}\n",null]}