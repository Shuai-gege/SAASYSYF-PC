{"remainingRequest":"D:\\ysyf\\iguard-vue01\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ysyf\\iguard-vue01\\src\\views\\angel\\tresidence\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ysyf\\iguard-vue01\\src\\views\\angel\\tresidence\\index.vue","mtime":1586084705000},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1586085021683},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\babel-loader\\lib\\index.js","mtime":1586085013966},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1586085021683},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\vue-loader\\lib\\index.js","mtime":1586085255129}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {getToken} from '@/utils/auth'\nimport {\n    tresidencelist, tresidencelistAll,tresidenceedit, tresidencedelete, tresidenceadd\n} from '@/api/angel/tresidence/tresidence'\nimport {\n    tgatewaylist\n} from '@/api/angel/tgateway/tgateway'\nimport {\n    tarealist\n} from '@/api/angel/tarea/tarea'\nimport Pagination from '@/components/Pagination' // Secondary package based on el-pagination\nimport {formatTimeToStr} from '@/utils/dateUtil'\nimport {deepClone} from '@/utils'\n\nconst token = getToken()\nconst entityVO = {\n    id: '',\n    provinceId: '',\n    cityId: '',\n    areaId: '',\n    townshipId: '',\n    villageName: '',\n    buildingName: '',\n    unit: '',\n    houseNo: '',\n    description: '',\n    gpsX: '',\n    gpsY: '',\n    gatewayId: '',\n    status: '',\n}\n\nexport default {\n    name: `tresidence`,\n    components: {Pagination},\n    data() {\n        return {\n            list: null,        // 户籍查询结果\n            listGateway: null, // 网关查询结果\n            listArea: null,    // 省查询结果\n            listCity: null,    // 市查询结果\n            listVillage: null, // 区查询结果\n            total: 0,\n            tableKey: 0,\n            listLoading: false,\n            listQuery: {\n                page: 1,\n                limit: 10,\n                id: '',\n                provinceId: '',\n                cityId: '',\n                areaId: '',\n                townshipId: '',\n                villageName: '',\n                buildingName: '',\n                unit: '',\n                houseNo: '',\n                description: '',\n                gpsX: '',\n                gpsY: '',\n                gatewayId: '',\n                status: '',\n            },        // 户籍查询参数\n            listGatewayQuery: {\n                id: '',\n                gatewayNo: '',\n                gatewayId: '',\n                modelId: '',\n                residenceId: '',\n                onlineStatus: '',\n            }, // 网关查询参数\n            listAreaQuery: {\n                id: '',\n                areaName: '',\n                parentId: '',\n            },    // 省市区查询参数\n            headersObj: {'LinkAdmin-Token': token},\n            activeName: 'first',\n            dialogVisibleEdit: false,\n            dialogVisibleAdd: false,\n            dialogType: 'new',\n            entityVO: Object.assign({}, entityVO),\n        }\n    },\n    watch: {\n        searchDeptName(val) {\n            this.$refs.serchDeptTree.filter(val)\n        }\n    },\n    created() {\n        this.getList();\n        this.getGatewayList();\n        this.getAreaList(0);\n    },\n    methods: {\n        async getAreaList(parentId){\n            this.listLoading = true\n            this.listAreaQuery.parentId = parentId;\n            // If the Promise is rejected, the rejected value is thrown.\n            try {\n                const res = await tarealist(this.listAreaQuery)\n                this.listLoading = false\n                if(parentId == '0'){\n                    this.listArea = res.result.rows\n                }\n                if(parentId.length>1){\n                    if(parentId.substring(2,4) == '00'){\n                        this.listCity = res.result.rows;\n                    }\n                    if(parentId.substring(2,4) != '00' && parentId.substring(4,6) == '00'){\n                        this.listVillage = res.result.rows;\n                    }\n                }\n\n\n                // this.total = res.result.records\n            } catch (e) {\n                this.listLoading = false\n            }\n        },\n        async getGatewayList() {\n            this.listLoading = true\n            // If the Promise is rejected, the rejected value is thrown.\n            try {\n                const res = await tgatewaylist(this.listGatewayQuery)\n                this.listLoading = false\n                this.listGateway = res.result.rows\n               // this.total = res.result.records\n            } catch (e) {\n                this.listLoading = false\n            }\n        },\n        async getList() {\n            this.listLoading = true\n            // If the Promise is rejected, the rejected value is thrown.\n            try {\n                const res = await tresidencelistAll(this.listQuery)\n                this.listLoading = false\n                this.list = res.result.rows\n                this.total = res.result.records\n            } catch (e) {\n                this.listLoading = false\n            }\n        },\n        // 查询\n        handleSearch() {\n            this.getList()\n        },\n        // 点击编辑按钮触发\n        handleEdit(scope) {\n            this.dialogVisibleEdit = true\n            this.entityVO = deepClone(scope.row)\n        },\n        // 点击新增按钮触发\n        handleAdd(scope) {\n            this.dialogVisibleAdd = true\n        },\n        // 编辑功能结束，点击确定按钮触发\n        async confirmTresidenceEdit() {\n            const res = await tresidenceedit(this.entityVO);\n            const result = res.code;\n            if (result == 20000) {\n                this.$message({\n                    showClose: true,\n                    message: '编辑成功',\n                    type: 'success'\n                })\n                this.dialogVisibleEdit = false;\n                this.getList();\n            }\n        },\n        // 新增功能结束，点击确定按钮触发\n        async confirmTresidenceAdd() {\n            const res = await tresidenceadd(this.entityVO);\n            const result = res.code;\n            if (result == 20000) {\n                this.$message({\n                    showClose: true,\n                    message: '新增成功',\n                    type: 'success'\n                })\n                this.dialogVisibleAdd = false;\n                this.getList();\n            }\n        },\n        // 点击删除按钮触发 删除生成的表的记录\n        async handleDelete(scope) {\n            const h = this.$createElement;\n            this.entityVO = deepClone(scope.row)\n            this.$msgbox({\n                title: '删除消息',\n                message: h('p', null, [\n                    h('span', null, '确定要删除 '),\n                    h('i', {style: 'color: teal'}, '这条记录吗?')\n                ]),\n                showCancelButton: true,\n                confirmButtonText: '确定',\n                cancelButtonText: '取消',\n                beforeClose: async (action, instance, done) => {\n                    if (action === 'confirm') {\n                        const res = await tresidencedelete(this.entityVO);\n                        if (res.code == 20000) {\n                            done();\n                        }\n                    } else {\n                        done();\n                    }\n                }\n            }).then(action => {\n                this.$message({\n                    showClose: true,\n                    type: 'success',\n                    message: '删除成功'\n                });\n                this.getList();\n            });\n        },\n\n        //状态转换\n        statusChange(row,column){\n            const status = row.status;\n            if(status == '0'){\n                return '启用';\n            }\n            if(status == '1'){\n                return '停用';\n            }\n        }\n    }\n}",null]}