{"remainingRequest":"D:\\ysyf\\iguard-vue01\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ysyf\\iguard-vue01\\src\\views\\iguard\\tbbuildinglocation\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ysyf\\iguard-vue01\\src\\views\\iguard\\tbbuildinglocation\\index.vue","mtime":1588126321075},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\babel-loader\\lib\\index.js","mtime":1586085013966},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1586085021683},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\vue-loader\\lib\\index.js","mtime":1586085255129}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getToken } from \"@/utils/auth\";\nimport {\n  tbbuildinglocationlist,\n  tbbuildinglocationedit,\n  tbbuildinglocationdelete,\n  tbbuildinglocationadd,\n  getCompanyDept //查询此账号下所属公司所有建筑\n} from \"@/api/iguard/tbbuildinglocation/tbbuildinglocation\";\nimport Pagination from \"@/components/Pagination\"; // Secondary package based on el-pagination\nimport { formatTimeToStr } from \"@/utils/dateUtil\";\nimport { deepClone } from \"@/utils\";\nconst token = getToken();\n// 新增建筑\nconst entityVO = {\n  vos: [\n    {\n      uid: \"\",\n      locationName: \"\",\n      parentId: \"\"\n    }\n  ]\n};\n// 新增楼层\nconst entityVO1 = {\n  vos: []\n};\n// 新增房间\nconst entityVO2 = {\n  vos: []\n};\n\nexport default {\n  name: `tbbuildinglocation`,\n  components: { Pagination },\n  data() {\n    return {\n      list: null,\n      total: 0,\n      tableKey: 0,\n      listLoading: false,\n      listQuery: {\n        page: 1,\n        limit: 10,\n        id: \"\",\n        locationName: \"\",\n        parentId: \"\"\n      },\n      headersObj: { \"LinkAdmin-Token\": token },\n      activeName: \"first\",\n      dialogVisibleEdit: false,\n      dialogVisibleAdd: false,\n      dialogVisibleAdd1: false,\n      dialogVisibleAdd2: false,\n      dialogVisible: false, //编辑弹窗\n      input1: \"\", //编辑前的内容\n      input2: \"\", //编辑为什么\n      editObj: {\n        //编辑提交的信息\n        id: \"\",\n        locationName: \"\",\n        parent_id: \"\"\n      },\n      editObj1: {}, //接受点击传来当前节点的对象\n      dialogType: \"new\",\n      entityVO: Object.assign({}, entityVO), //新增建筑\n      entityVO1: Object.assign({}, entityVO1), //新增楼层\n      entityVO2: Object.assign({}, entityVO2), //新增房间\n      radio: \"\", //单选框\n      radio1: \"\", //根据当前单选框选中的东西做判断\n      uid: localStorage.getItem(\"uid\"), //查询当前登录人所属公司所有建筑\n      flag: false, //控制楼层和空间是否显示\n      flag1: false, //控制树形控件显示隐藏\n      defaultProps: {\n        children: \"childrens\",\n        label: \"locationName\"\n      },\n      defaultProps1: {\n        //展示公司架构\n        children: \"childrens\",\n        label: \"locationName\"\n      },\n      data1: [], //树形控件List\n      state1: \"\", //新增建筑\n      state2: \"\", //新增楼层是要选的建筑\n      state3: \"\", //新增房间是要选的楼层\n      restaurants: [], //新增建筑List\n      restaurants1: [], //新增楼层是要选的建筑List\n      restaurants2: [], //新增房间是要选的楼层List\n      parentId: \"\", //新建楼层时必传的\n      jinXuan: false, //新增楼层选定建筑后不换\n      jinXuan1: false, //新增楼层选定建筑后不换\n      jinXuan2: false, //新增楼层选定建筑后不换\n      jianZhu: localStorage.getItem(\"deptName\")\n    };\n  },\n  watch: {\n    searchDeptName(val) {\n      this.$refs.serchDeptTree.filter(val);\n    },\n    filterText(val) {\n      this.$refs.tree.filter(val);\n    }\n  },\n  created() {\n    this.getList();\n  },\n  mounted() {\n    this.getCompanyDeptList();\n  },\n  methods: {\n    // 展示List，不过没用上，也就不删除了，怕有其他地方有用到。\n    async getList() {\n      this.listLoading = true;\n      // If the Promise is rejected, the rejected value is thrown.\n      try {\n        const res = await tbbuildinglocationlist(this.listQuery);\n        this.listLoading = false;\n        this.list = res.result.rows;\n        this.total = res.result.records;\n        console.log(this.list);\n      } catch (e) {\n        this.listLoading = false;\n      }\n    },\n    // 获取当前登录人所属公司所有建筑&楼层&空间\n    async getCompanyDeptList() {\n      try {\n        const res = await getCompanyDept(this.uid);\n        this.data = res.result;\n        this.data1 = res.result;\n      } catch (e) {\n        console.log(e);\n      }\n    },\n    // 公司建筑树形图\n    filterNode(value, data) {\n      if (!value) return true;\n      return data.locationName.indexOf(value) !== -1;\n    },\n    // 选中的那个\n    xuan(obj) {\n      console.log(obj);\n      this.filterText = obj.locationName;\n      this.flag1 = false;\n      this.entityVO.vos[0].parentId = obj.id;\n    },\n    // 展示树形控件\n    handleNodeClick(data) {\n      console.log(data);\n    },\n    // 查询\n    handleSearch() {\n      this.getList();\n    },\n    // 点击编辑按钮触发\n    handleEdit(scope) {\n      this.dialogVisibleEdit = true;\n      this.entityVO.vos[0] = deepClone(scope.row);\n    },\n    // 点击新增建筑按钮触发\n    handleAdd(scope) {\n      this.dialogVisibleAdd = true;\n      this.state1 = \"\";\n      this.state2 = \"\";\n      this.state3 = \"\";\n      this.entityVO.vos = [];\n    },\n    // 点击新增楼层按钮触发\n    handleAdd1(scope) {\n      this.dialogVisibleAdd1 = true;\n      this.state1 = \"\";\n      this.state2 = \"\";\n      this.state3 = \"\";\n      this.entityVO1.vos = [];\n    },\n    //关系新增建筑弹出框\n    end() {\n      this.state2 = \"\";\n      this.state3 = \"\";\n    },\n    //关闭新增楼层弹窗\n    end1() {\n      this.state2 = \"\";\n      this.state3 = \"\";\n      this.jinXuan = false;\n    },\n    //关闭新增房间弹窗\n    end2() {\n      this.state2 = \"\";\n      this.state3 = \"\";\n      this.jinXuan1 = false;\n      this.jinXuan2 = false;\n    },\n    // 点击新增房间按钮触发\n    handleAdd2(scope) {\n      this.dialogVisibleAdd2 = true;\n      this.state1 = \"\";\n      this.state2 = \"\";\n      this.state3 = \"\";\n      this.entityVO2.vos = [];\n    },\n    // 编辑功能结束，点击确定按钮触发\n    async confirmTbbuildinglocationEdit() {\n      const res = await tbbuildinglocationedit(this.entityVO);\n      const result = res.code;\n      if (result == 20000) {\n        this.$message({\n          showClose: true,\n          message: \"编辑成功\",\n          type: \"success\"\n        });\n        this.dialogVisibleEdit = false;\n        this.getList();\n      }\n    },\n    // 新增功能结束，点击确定按钮触发\n    async confirmTbbuildinglocationAdd(data) {\n      this.entityVO.vos[0].uid = localStorage.getItem(\"uid\");\n      const res = await tbbuildinglocationadd(data);\n      const result = res.code;\n      if (result == 20000) {\n        this.$message({\n          showClose: true,\n          message: \"新增成功\",\n          type: \"success\"\n        });\n        this.dialogVisibleAdd = false;\n        this.getCompanyDeptList();\n      }\n    },\n    // 点击删除按钮触发 删除生成的表的记录\n    async handleDelete(id) {\n      const h = this.$createElement;\n      var dataId = { id: id }; //删除所传当前数据ID\n      // this.entityVO.vos[0] = deepClone(scope.row);\n      this.$msgbox({\n        title: \"删除消息\",\n        message: h(\"p\", null, [\n          h(\"span\", null, \"确定要删除 \"),\n          h(\"i\", { style: \"color: teal\" }, \"这条记录吗?\"),\n          h(\"i\", { style: \"color:#fc4c4c\" }, \"它下面可能会有其他数据\")\n        ]),\n        showCancelButton: true,\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        beforeClose: async (action, instance, done) => {\n          console.log(action, instance);\n          if (action === \"confirm\") {\n            const res = await tbbuildinglocationdelete(dataId);\n            if (res.code == 20000) {\n              done();\n            }\n          } else {\n            done();\n            this.getCompanyDeptList();\n          }\n        }\n      }).then(action => {\n        this.$message({\n          showClose: true,\n          type: \"success\",\n          message: \"删除成功\"\n        });\n        this.getCompanyDeptList();\n      });\n    },\n    //批量添加建筑\n    submitForm(formName) {\n      this.$refs[formName].validate(valid => {\n        if (valid) {\n          this.confirmTbbuildinglocationAdd(this.entityVO);\n          this.entityVO.vos.locationName = \"\";\n          console.log(this.entityVO);\n        } else {\n          console.log(\"error submit!!\");\n          return false;\n        }\n      });\n    },\n    // 删除建筑输入框\n    removeDomain(item) {\n      var index = this.entityVO.vos.indexOf(item);\n      if (index !== -1) {\n        this.entityVO.vos.splice(index, 1);\n      }\n    },\n    // 新增建筑输入框\n    addDomain() {\n      this.entityVO.vos.push({\n        uid: localStorage.getItem(\"uid\"),\n        locationName: \"\",\n        parentId: \"\"\n      });\n      console.log(this.entityVO);\n    },\n    // 添加楼层\n    async querySearch(queryString, cb) {\n      try {\n        const res = await getCompanyDept(this.uid);\n        this.restaurants = res.result;\n        for (var i = 0; i < res.result.length; i++) {\n          this.$set(\n            this.restaurants[i],\n            \"value\",\n            this.restaurants[i].locationName\n          );\n        }\n        var restaurants1 = queryString\n          ? this.restaurants.filter(this.createFilter(queryString))\n          : this.restaurants;\n        console.log(res);\n      } catch (e) {\n        console.log(e);\n      }\n      // 调用 callback 返回建议列表的数据\n      cb(restaurants1);\n    },\n    createFilter(queryString) {\n      return restaurant => {\n        return (\n          restaurant.value.toLowerCase().indexOf(queryString.toLowerCase()) ===\n          0\n        );\n      };\n    },\n    handleSelect(item) {\n      console.log(item);\n      localStorage.setItem(\"id\", item.id);\n      this.parentId = item.id;\n      this.jinXuan = true;\n    },\n    //批量添加楼层\n    submitForm1(formName) {\n      if (this.state1 == \"\") {\n        this.$message({\n          message: \"请选择建筑\"\n        });\n      } else {\n        this.$refs[formName].validate(valid => {\n          console.log(\"valid\", valid);\n          if (valid) {\n            this.confirmTbbuildinglocationAdd(this.entityVO1);\n            console.log(this.entityVO1);\n            this.dialogVisibleAdd1 = false;\n            this.jinXuan = false;\n          } else {\n            console.log(\"error submit!!\");\n            return false;\n          }\n        });\n      }\n    },\n    // 删除建筑输入框\n    removeDomain1(item) {\n      console.log(item);\n      var index = this.entityVO1.vos.indexOf(item);\n      if (index !== -1) {\n        this.entityVO1.vos.splice(index, 1);\n      }\n    },\n    // 新增楼层输入框\n    addDomain1() {\n      if (this.state1 == \"\") {\n        this.$message({\n          message: \"请选择要添加的建筑\"\n        });\n      } else {\n        this.entityVO1.vos.push({\n          uid: localStorage.getItem(\"uid\"),\n          locationName: \"\",\n          parentId: this.parentId\n        });\n      }\n    },\n\n    //批量添加房间下面的是查询建筑\n    async querySearch1(queryString, cb) {\n      try {\n        const res = await getCompanyDept(this.uid);\n        this.restaurants1 = res.result;\n        for (var i = 0; i < res.result.length; i++) {\n          this.$set(\n            this.restaurants1[i],\n            \"value\",\n            this.restaurants1[i].locationName\n          );\n        }\n        var restaurants2 = queryString\n          ? this.restaurants1.filter(this.createFilter1(queryString))\n          : this.restaurants1;\n        console.log(res);\n      } catch (e) {\n        console.log(e);\n      }\n      // 调用 callback 返回建议列表的数据\n      cb(restaurants2);\n    },\n    createFilter1(queryString) {\n      return restaurant => {\n        return (\n          restaurant.value.toLowerCase().indexOf(queryString.toLowerCase()) ===\n          0\n        );\n      };\n    },\n    handleSelect1(item) {\n      console.log(item);\n      this.restaurants2 = item.childrens;\n      this.jinXuan1 = true;\n    },\n    //批量添加房间下面的是查询楼层\n    querySearch2(queryString, cb) {\n      console.log(this.restaurants2);\n      for (var i = 0; i < this.restaurants2.length; i++) {\n        this.$set(\n          this.restaurants2[i],\n          \"value\",\n          this.restaurants2[i].locationName\n        );\n      }\n      var restaurants3 = queryString\n        ? this.restaurants2.filter(this.createFilter2(queryString))\n        : this.restaurants2;\n      // 调用 callback 返回建议列表的数据\n      cb(restaurants3);\n    },\n    createFilter2(queryString) {\n      return restaurant => {\n        return (\n          restaurant.value.toLowerCase().indexOf(queryString.toLowerCase()) ===\n          0\n        );\n      };\n    },\n    handleSelect2(item) {\n      console.log(item);\n      localStorage.setItem(\"floorId\", item.id);\n      this.jinXuan2 = true;\n    },\n    //批量添加房间\n    submitForm2(formName) {\n      if (this.state2 == \"\" || this.state3 == \"\") {\n        this.$message({\n          message: \"请选择建筑和楼层\"\n        });\n      } else {\n        this.$refs[formName].validate(valid => {\n          if (valid) {\n            console.log(\"valid\", valid);\n            this.confirmTbbuildinglocationAdd(this.entityVO2);\n            console.log(this.entityVO2);\n            this.dialogVisibleAdd2 = false;\n            this.jinXuan = false;\n            this.jinXuan1 = false;\n            this.jinXuan2 = false;\n          } else {\n            console.log(\"error submit!!\");\n            return false;\n          }\n        });\n      }\n    },\n    // 删除房间输入框\n    removeDomain2(item) {\n      console.log(item);\n      var index = this.entityVO2.vos.indexOf(item);\n      if (index !== -1) {\n        this.entityVO2.vos.splice(index, 1);\n      }\n    },\n    // 新增房间输入框\n    addDomain2() {\n      if (this.state2 == \"\" || this.state3 == \"\") {\n        this.$message({\n          message: \"请选择建筑和楼层\"\n        });\n      } else {\n        this.entityVO2.vos.push({\n          uid: localStorage.getItem(\"uid\"),\n          locationName: \"\",\n          parentId: localStorage.getItem(\"floorId\")\n        });\n      }\n      console.log(this.entityVO2);\n    },\n\n    // 树形随意删除某一个\n    async remove(node, data) {\n      console.log(node, data);\n      this.handleDelete(data.id);\n      const parent = node.parent;\n      const children = parent.data.childrens || parent.data;\n      const index = children.findIndex(d => d.id === data.id);\n      children.splice(index, 1);\n    },\n    // 树形随意编辑某一个\n    async edit(node, data) {\n      this.dialogVisible = true;\n      console.log(\"node\", node);\n      this.input1 = data.locationName;\n      console.log(\"data\", data);\n      this.editObj1 = data;\n    },\n    // 退出编辑\n    endEdit() {\n      this.input2 = \"\";\n      this.dialogVisible = false;\n    },\n    // 提交修改后的信息\n    async isEdit() {\n      console.log(this.editObj1);\n      this.editObj.id = this.editObj1.id;\n      this.editObj.parent_id = this.editObj1.parentId;\n      this.editObj.locationName = this.input2;\n      const res = await tbbuildinglocationedit(this.editObj);\n      const result = res.code;\n      if (result == 20000) {\n        this.$message({\n          showClose: true,\n          message: \"编辑成功\",\n          type: \"success\"\n        });\n        this.dialogVisible = false;\n        this.input2 = \"\";\n        this.getCompanyDeptList();\n      }\n    },\n    // 编辑弹窗\n    handleClose(done) {\n      this.$confirm(\"确认关闭？\")\n        .then(_ => {\n          done();\n        })\n        .catch(_ => {});\n    }\n  }\n};\n",null]}