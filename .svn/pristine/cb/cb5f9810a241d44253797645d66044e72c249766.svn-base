{"remainingRequest":"D:\\ysyf\\iguard-vue01\\node_modules\\thread-loader\\dist\\cjs.js!D:\\ysyf\\iguard-vue01\\node_modules\\babel-loader\\lib\\index.js!D:\\ysyf\\iguard-vue01\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\ysyf\\iguard-vue01\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ysyf\\iguard-vue01\\src\\views\\permission\\job.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ysyf\\iguard-vue01\\src\\views\\permission\\job.vue","mtime":1586084705000},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1586085021683},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1586085236938},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\babel-loader\\lib\\index.js","mtime":1586085013966},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1586085021683},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\vue-loader\\lib\\index.js","mtime":1586085255129}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"D:\\\\ysyf\\\\iguard-vue01\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport permission from '@/directive/permission/index.js'; // 权限判断指令\n\nimport { jobList, addJob, updateJob, updateState, deleteJob } from '@/api/permission/job';\nimport Pagination from '@/components/Pagination'; // Secondary package based on el-pagination\n\nimport { deepClone } from '@/utils';\nvar defaultJob = {\n  id: undefined,\n  name: '',\n  state: 1,\n  sorts: undefined\n};\nexport default {\n  name: 'Job',\n  components: {\n    Pagination: Pagination\n  },\n  directives: {\n    permission: permission\n  },\n  data: function data() {\n    return {\n      tableKey: 0,\n      list: null,\n      total: 0,\n      listLoading: false,\n      listQuery: {\n        page: 1,\n        limit: 10,\n        name: ''\n      },\n      job: Object.assign({}, defaultJob),\n      dialogVisible: false,\n      dialogType: 'new',\n      rules: {\n        name: [{\n          required: true,\n          message: '请输入岗位名',\n          trigger: 'blur'\n        }, {\n          min: 2,\n          max: 15,\n          message: '长度在 2 到 15 个字符',\n          trigger: 'blur'\n        }],\n        state: [{\n          required: true,\n          message: '请选择状态',\n          trigger: 'change'\n        }]\n      }\n    };\n  },\n  created: function created() {\n    this.getList();\n  },\n  methods: {\n    getList: function () {\n      var _getList = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var res;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.listLoading = true; // If the Promise is rejected, the rejected value is thrown.\n\n                _context.prev = 1;\n                _context.next = 4;\n                return jobList(this.listQuery);\n\n              case 4:\n                res = _context.sent;\n                this.listLoading = false;\n                this.list = res.result.rows;\n                this.total = res.result.records;\n                _context.next = 13;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](1);\n                this.listLoading = false;\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 10]]);\n      }));\n\n      function getList() {\n        return _getList.apply(this, arguments);\n      }\n\n      return getList;\n    }(),\n    handleSearch: function handleSearch() {\n      this.getList();\n    },\n    // 状态修改\n    handleStateChange: function handleStateChange(row) {\n      var _this = this;\n\n      var text = row.state === 1 ? '启用' : '停用';\n      this.$confirm('确认要 [' + text + '] [' + row.name + '] 岗位吗?', '警告', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(\n      /*#__PURE__*/\n      _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return updateState({\n                  id: row.id,\n                  state: row.state\n                });\n\n              case 2:\n                _this.$message({\n                  message: text + '成功',\n                  type: 'success'\n                });\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))).catch(function (err) {\n        console.error(err);\n        row.state = row.state === 0 ? 1 : 0;\n      });\n    },\n    handleCreate: function handleCreate() {\n      this.dialogType = 'new';\n      this.dialogVisible = true;\n    },\n    handleEdit: function handleEdit(scope) {\n      this.dialogType = 'edit';\n      this.dialogVisible = true;\n      this.checkStrictly = true;\n      this.job = deepClone(scope.row);\n    },\n    confirmRole: function () {\n      var _confirmRole = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3() {\n        var isEdit;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                isEdit = this.dialogType === 'edit';\n\n                if (!isEdit) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                _context3.next = 4;\n                return updateJob(this.job);\n\n              case 4:\n                _context3.next = 8;\n                break;\n\n              case 6:\n                _context3.next = 8;\n                return addJob(this.job);\n\n              case 8:\n                this.dialogVisible = false;\n                this.$message({\n                  showClose: true,\n                  message: '保存成功',\n                  type: 'success'\n                });\n                this.getList();\n\n              case 11:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function confirmRole() {\n        return _confirmRole.apply(this, arguments);\n      }\n\n      return confirmRole;\n    }(),\n    handleDelete: function handleDelete(_ref2) {\n      var _this2 = this;\n\n      var row = _ref2.row;\n      this.$confirm('确认删除?', '警告', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(\n      /*#__PURE__*/\n      _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4() {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return deleteJob(row.id);\n\n              case 2:\n                _this2.$message({\n                  showClose: true,\n                  message: '删除成功',\n                  type: 'success'\n                });\n\n                _this2.getList();\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }))).catch(function (err) {\n        console.error(err);\n      });\n    }\n  }\n};",null]}