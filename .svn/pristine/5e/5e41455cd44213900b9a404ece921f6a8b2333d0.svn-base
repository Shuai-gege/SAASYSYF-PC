{"remainingRequest":"D:\\ysyf\\iguard-vue01\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ysyf\\iguard-vue01\\src\\views\\angel\\tag\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ysyf\\iguard-vue01\\src\\views\\angel\\tag\\index.vue","mtime":1586084705000},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1586085021683},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\babel-loader\\lib\\index.js","mtime":1586085013966},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1586085021683},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\vue-loader\\lib\\index.js","mtime":1586085255129}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {getToken} from '@/utils/auth'\nimport {\n    taglist, tagedit, tagdelete, tagadd\n} from '@/api/angel/tag/tag'\nimport {\n    tagconflist\n} from '@/api/angel/tagconf/tagconf'\nimport Pagination from '@/components/Pagination' // Secondary package based on el-pagination\nimport {formatTimeToStr} from '@/utils/dateUtil'\nimport {deepClone} from '@/utils'\n\nconst token = getToken()\nconst entityVO = {\n    tagId: null,\n    TenantId: '',\n    tagNo: '',\n    tagConfId: null,\n    tagModel: '',\n    tagBrand: '',\n    tagTypeName: '',\n    tagMac: '',\n    tagBindStatus: '',\n    tagBindPersonId: null,\n    tagBindPersonName: '',\n    tagBatteryStatus: '',\n    tagPositioning: '',\n}\n\nexport default {\n    name: `tag`,\n    components: {Pagination},\n    data() {\n        return {\n            list: null,\n            listTagConf: null,\n            total: 0,\n            tableKey: 0,\n            listLoading: false,\n            listQuery: {\n                page: 1,\n                limit: 10,\n                tagId: null,\n                TenantId: '',\n                tagNo: '',\n                tagConfId: null,\n                tagModel: '',\n                tagBrand: '',\n                tagTypeName: '',\n                tagMac: '',\n                tagBindStatus: '',\n                tagBindPersonId: null,\n                tagBindPersonName: '',\n                tagBatteryStatus: '',\n                tagPositioning: '',\n            },\n            listTagConfQuery: {\n                tagConfId: null,\n                tagModel: '',\n                tagBrand: '',\n                tagTypeId: null,\n                tagRemark: '',\n            },\n            headersObj: {'LinkAdmin-Token': token},\n            activeName: 'first',\n            dialogVisibleEdit: false,\n            dialogVisibleAdd: false,\n            dialogType: 'new',\n            entityVO: Object.assign({}, entityVO),\n        }\n    },\n    watch: {\n        searchDeptName(val) {\n            this.$refs.serchDeptTree.filter(val)\n        }\n    },\n    created() {\n        this.getList()\n        this.getTagConfList()\n    },\n    methods: {\n        async getTagConfList() {\n            this.listLoading = true\n            // If the Promise is rejected, the rejected value is thrown.\n            try {\n                const res = await tagconflist(this.listTagConfQuery)\n                this.listLoading = false\n                this.listTagConf = res.result.rows\n               // this.total = res.result.records\n            } catch (e) {\n                this.listLoading = false\n            }\n        },\n        async getList() {\n            this.listLoading = true\n            // If the Promise is rejected, the rejected value is thrown.\n            try {\n                const res = await taglist(this.listQuery)\n                this.listLoading = false\n                this.list = res.result.rows\n                this.total = res.result.records\n            } catch (e) {\n                this.listLoading = false\n            }\n        },\n        // 查询\n        handleSearch() {\n            this.getList()\n        },\n        // 点击编辑按钮触发\n        handleEdit(scope) {\n            this.dialogVisibleEdit = true\n            this.entityVO = deepClone(scope.row)\n        },\n        // 点击新增按钮触发\n        handleAdd(scope) {\n            this.dialogVisibleAdd = true\n        },\n        // 编辑功能结束，点击确定按钮触发\n        async confirmTagEdit() {\n            const res = await tagedit(this.entityVO);\n            const result = res.code;\n            if (result == 20000) {\n                this.$message({\n                    showClose: true,\n                    message: '编辑成功',\n                    type: 'success'\n                })\n                this.dialogVisibleEdit = false;\n                this.getList();\n            }\n        },\n        // 新增功能结束，点击确定按钮触发\n        async confirmTagAdd() {\n            const res = await tagadd(this.entityVO);\n            const result = res.code;\n            if (result == 20000) {\n                this.$message({\n                    showClose: true,\n                    message: '新增成功',\n                    type: 'success'\n                })\n                this.dialogVisibleAdd = false;\n                this.getList();\n            }\n        },\n        // 点击删除按钮触发 删除生成的表的记录\n        async handleDelete(scope) {\n            const h = this.$createElement;\n            this.entityVO = deepClone(scope.row)\n            this.$msgbox({\n                title: '删除消息',\n                message: h('p', null, [\n                    h('span', null, '确定要删除 '),\n                    h('i', {style: 'color: teal'}, '这条记录吗?')\n                ]),\n                showCancelButton: true,\n                confirmButtonText: '确定',\n                cancelButtonText: '取消',\n                beforeClose: async (action, instance, done) => {\n                    if (action === 'confirm') {\n                        const res = await tagdelete(this.entityVO);\n                        if (res.code == 20000) {\n                            done();\n                        }\n                    } else {\n                        done();\n                    }\n                }\n            }).then(action => {\n                this.$message({\n                    showClose: true,\n                    type: 'success',\n                    message: '删除成功'\n                });\n                this.getList();\n            });\n        },\n\n        // 绑定状态转换\n        bindStatus(row,column){\n            const tagBindStatus = row.tagBindStatus;\n            if(tagBindStatus == '0'){\n                return '未绑定';\n            }\n            if(tagBindStatus == '1'){\n                return '帮定中';\n            }\n        },\n        // 电量状态   0--电量高，1--电量中，2--低电量，3--不支持电量显示\n        powerStatus(row,column){\n            const tagBatteryStatus = row.tagBatteryStatus;\n            if(tagBatteryStatus == '0'){\n                return '电量高';\n            }\n            if(tagBatteryStatus == '1'){\n                return '电量中';\n            }\n            if(tagBatteryStatus == '2'){\n                return '低电量';\n            }\n            if(tagBatteryStatus == '3'){\n                return '不支持电量显示';\n            }\n        },\n        // 侦测状态 0-未被侦测，1-侦测中\n        testStatus(row,column){\n            const tagPositioning = row.tagPositioning;\n            if(tagPositioning == '0'){\n                return '未被侦测';\n            }\n            if(tagPositioning == '1'){\n                return '侦测中';\n            }\n        }\n    }\n}",null]}