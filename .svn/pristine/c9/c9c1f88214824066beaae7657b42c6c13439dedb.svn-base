{"remainingRequest":"D:\\ysyf\\iguard-vue01\\node_modules\\thread-loader\\dist\\cjs.js!D:\\ysyf\\iguard-vue01\\node_modules\\babel-loader\\lib\\index.js!D:\\ysyf\\iguard-vue01\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\ysyf\\iguard-vue01\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ysyf\\iguard-vue01\\src\\views\\iguard\\tbbuildinglocation\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ysyf\\iguard-vue01\\src\\views\\iguard\\tbbuildinglocation\\index.vue","mtime":1588126321075},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1586085021683},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1586085236938},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\babel-loader\\lib\\index.js","mtime":1586085013966},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1586085021683},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\vue-loader\\lib\\index.js","mtime":1586085255129}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find-index\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"D:\\\\ysyf\\\\iguard-vue01\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getToken } from \"@/utils/auth\";\nimport { tbbuildinglocationlist, tbbuildinglocationedit, tbbuildinglocationdelete, tbbuildinglocationadd, getCompanyDept //查询此账号下所属公司所有建筑\n} from \"@/api/iguard/tbbuildinglocation/tbbuildinglocation\";\nimport Pagination from \"@/components/Pagination\"; // Secondary package based on el-pagination\n\nimport { formatTimeToStr } from \"@/utils/dateUtil\";\nimport { deepClone } from \"@/utils\";\nvar token = getToken(); // 新增建筑\n\nvar entityVO = {\n  vos: [{\n    uid: \"\",\n    locationName: \"\",\n    parentId: \"\"\n  }]\n}; // 新增楼层\n\nvar entityVO1 = {\n  vos: []\n}; // 新增房间\n\nvar entityVO2 = {\n  vos: []\n};\nexport default {\n  name: \"tbbuildinglocation\",\n  components: {\n    Pagination: Pagination\n  },\n  data: function data() {\n    return {\n      list: null,\n      total: 0,\n      tableKey: 0,\n      listLoading: false,\n      listQuery: {\n        page: 1,\n        limit: 10,\n        id: \"\",\n        locationName: \"\",\n        parentId: \"\"\n      },\n      headersObj: {\n        \"LinkAdmin-Token\": token\n      },\n      activeName: \"first\",\n      dialogVisibleEdit: false,\n      dialogVisibleAdd: false,\n      dialogVisibleAdd1: false,\n      dialogVisibleAdd2: false,\n      dialogVisible: false,\n      //编辑弹窗\n      input1: \"\",\n      //编辑前的内容\n      input2: \"\",\n      //编辑为什么\n      editObj: {\n        //编辑提交的信息\n        id: \"\",\n        locationName: \"\",\n        parent_id: \"\"\n      },\n      editObj1: {},\n      //接受点击传来当前节点的对象\n      dialogType: \"new\",\n      entityVO: Object.assign({}, entityVO),\n      //新增建筑\n      entityVO1: Object.assign({}, entityVO1),\n      //新增楼层\n      entityVO2: Object.assign({}, entityVO2),\n      //新增房间\n      radio: \"\",\n      //单选框\n      radio1: \"\",\n      //根据当前单选框选中的东西做判断\n      uid: localStorage.getItem(\"uid\"),\n      //查询当前登录人所属公司所有建筑\n      flag: false,\n      //控制楼层和空间是否显示\n      flag1: false,\n      //控制树形控件显示隐藏\n      defaultProps: {\n        children: \"childrens\",\n        label: \"locationName\"\n      },\n      defaultProps1: {\n        //展示公司架构\n        children: \"childrens\",\n        label: \"locationName\"\n      },\n      data1: [],\n      //树形控件List\n      state1: \"\",\n      //新增建筑\n      state2: \"\",\n      //新增楼层是要选的建筑\n      state3: \"\",\n      //新增房间是要选的楼层\n      restaurants: [],\n      //新增建筑List\n      restaurants1: [],\n      //新增楼层是要选的建筑List\n      restaurants2: [],\n      //新增房间是要选的楼层List\n      parentId: \"\",\n      //新建楼层时必传的\n      jinXuan: false,\n      //新增楼层选定建筑后不换\n      jinXuan1: false,\n      //新增楼层选定建筑后不换\n      jinXuan2: false,\n      //新增楼层选定建筑后不换\n      jianZhu: localStorage.getItem(\"deptName\")\n    };\n  },\n  watch: {\n    searchDeptName: function searchDeptName(val) {\n      this.$refs.serchDeptTree.filter(val);\n    },\n    filterText: function filterText(val) {\n      this.$refs.tree.filter(val);\n    }\n  },\n  created: function created() {\n    this.getList();\n  },\n  mounted: function mounted() {\n    this.getCompanyDeptList();\n  },\n  methods: {\n    // 展示List，不过没用上，也就不删除了，怕有其他地方有用到。\n    getList: function () {\n      var _getList = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var res;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.listLoading = true; // If the Promise is rejected, the rejected value is thrown.\n\n                _context.prev = 1;\n                _context.next = 4;\n                return tbbuildinglocationlist(this.listQuery);\n\n              case 4:\n                res = _context.sent;\n                this.listLoading = false;\n                this.list = res.result.rows;\n                this.total = res.result.records;\n                console.log(this.list);\n                _context.next = 14;\n                break;\n\n              case 11:\n                _context.prev = 11;\n                _context.t0 = _context[\"catch\"](1);\n                this.listLoading = false;\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 11]]);\n      }));\n\n      function getList() {\n        return _getList.apply(this, arguments);\n      }\n\n      return getList;\n    }(),\n    // 获取当前登录人所属公司所有建筑&楼层&空间\n    getCompanyDeptList: function () {\n      var _getCompanyDeptList = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var res;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return getCompanyDept(this.uid);\n\n              case 3:\n                res = _context2.sent;\n                this.data = res.result;\n                this.data1 = res.result;\n                _context2.next = 11;\n                break;\n\n              case 8:\n                _context2.prev = 8;\n                _context2.t0 = _context2[\"catch\"](0);\n                console.log(_context2.t0);\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 8]]);\n      }));\n\n      function getCompanyDeptList() {\n        return _getCompanyDeptList.apply(this, arguments);\n      }\n\n      return getCompanyDeptList;\n    }(),\n    // 公司建筑树形图\n    filterNode: function filterNode(value, data) {\n      if (!value) return true;\n      return data.locationName.indexOf(value) !== -1;\n    },\n    // 选中的那个\n    xuan: function xuan(obj) {\n      console.log(obj);\n      this.filterText = obj.locationName;\n      this.flag1 = false;\n      this.entityVO.vos[0].parentId = obj.id;\n    },\n    // 展示树形控件\n    handleNodeClick: function handleNodeClick(data) {\n      console.log(data);\n    },\n    // 查询\n    handleSearch: function handleSearch() {\n      this.getList();\n    },\n    // 点击编辑按钮触发\n    handleEdit: function handleEdit(scope) {\n      this.dialogVisibleEdit = true;\n      this.entityVO.vos[0] = deepClone(scope.row);\n    },\n    // 点击新增建筑按钮触发\n    handleAdd: function handleAdd(scope) {\n      this.dialogVisibleAdd = true;\n      this.state1 = \"\";\n      this.state2 = \"\";\n      this.state3 = \"\";\n      this.entityVO.vos = [];\n    },\n    // 点击新增楼层按钮触发\n    handleAdd1: function handleAdd1(scope) {\n      this.dialogVisibleAdd1 = true;\n      this.state1 = \"\";\n      this.state2 = \"\";\n      this.state3 = \"\";\n      this.entityVO1.vos = [];\n    },\n    //关系新增建筑弹出框\n    end: function end() {\n      this.state2 = \"\";\n      this.state3 = \"\";\n    },\n    //关闭新增楼层弹窗\n    end1: function end1() {\n      this.state2 = \"\";\n      this.state3 = \"\";\n      this.jinXuan = false;\n    },\n    //关闭新增房间弹窗\n    end2: function end2() {\n      this.state2 = \"\";\n      this.state3 = \"\";\n      this.jinXuan1 = false;\n      this.jinXuan2 = false;\n    },\n    // 点击新增房间按钮触发\n    handleAdd2: function handleAdd2(scope) {\n      this.dialogVisibleAdd2 = true;\n      this.state1 = \"\";\n      this.state2 = \"\";\n      this.state3 = \"\";\n      this.entityVO2.vos = [];\n    },\n    // 编辑功能结束，点击确定按钮触发\n    confirmTbbuildinglocationEdit: function () {\n      var _confirmTbbuildinglocationEdit = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3() {\n        var res, result;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return tbbuildinglocationedit(this.entityVO);\n\n              case 2:\n                res = _context3.sent;\n                result = res.code;\n\n                if (result == 20000) {\n                  this.$message({\n                    showClose: true,\n                    message: \"编辑成功\",\n                    type: \"success\"\n                  });\n                  this.dialogVisibleEdit = false;\n                  this.getList();\n                }\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function confirmTbbuildinglocationEdit() {\n        return _confirmTbbuildinglocationEdit.apply(this, arguments);\n      }\n\n      return confirmTbbuildinglocationEdit;\n    }(),\n    // 新增功能结束，点击确定按钮触发\n    confirmTbbuildinglocationAdd: function () {\n      var _confirmTbbuildinglocationAdd = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4(data) {\n        var res, result;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                this.entityVO.vos[0].uid = localStorage.getItem(\"uid\");\n                _context4.next = 3;\n                return tbbuildinglocationadd(data);\n\n              case 3:\n                res = _context4.sent;\n                result = res.code;\n\n                if (result == 20000) {\n                  this.$message({\n                    showClose: true,\n                    message: \"新增成功\",\n                    type: \"success\"\n                  });\n                  this.dialogVisibleAdd = false;\n                  this.getCompanyDeptList();\n                }\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function confirmTbbuildinglocationAdd(_x) {\n        return _confirmTbbuildinglocationAdd.apply(this, arguments);\n      }\n\n      return confirmTbbuildinglocationAdd;\n    }(),\n    // 点击删除按钮触发 删除生成的表的记录\n    handleDelete: function () {\n      var _handleDelete = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee6(id) {\n        var _this = this;\n\n        var h, dataId;\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                h = this.$createElement;\n                dataId = {\n                  id: id\n                }; //删除所传当前数据ID\n                // this.entityVO.vos[0] = deepClone(scope.row);\n\n                this.$msgbox({\n                  title: \"删除消息\",\n                  message: h(\"p\", null, [h(\"span\", null, \"确定要删除 \"), h(\"i\", {\n                    style: \"color: teal\"\n                  }, \"这条记录吗?\"), h(\"i\", {\n                    style: \"color:#fc4c4c\"\n                  }, \"它下面可能会有其他数据\")]),\n                  showCancelButton: true,\n                  confirmButtonText: \"确定\",\n                  cancelButtonText: \"取消\",\n                  beforeClose: function () {\n                    var _beforeClose = _asyncToGenerator(\n                    /*#__PURE__*/\n                    regeneratorRuntime.mark(function _callee5(action, instance, done) {\n                      var res;\n                      return regeneratorRuntime.wrap(function _callee5$(_context5) {\n                        while (1) {\n                          switch (_context5.prev = _context5.next) {\n                            case 0:\n                              console.log(action, instance);\n\n                              if (!(action === \"confirm\")) {\n                                _context5.next = 8;\n                                break;\n                              }\n\n                              _context5.next = 4;\n                              return tbbuildinglocationdelete(dataId);\n\n                            case 4:\n                              res = _context5.sent;\n\n                              if (res.code == 20000) {\n                                done();\n                              }\n\n                              _context5.next = 10;\n                              break;\n\n                            case 8:\n                              done();\n\n                              _this.getCompanyDeptList();\n\n                            case 10:\n                            case \"end\":\n                              return _context5.stop();\n                          }\n                        }\n                      }, _callee5);\n                    }));\n\n                    function beforeClose(_x3, _x4, _x5) {\n                      return _beforeClose.apply(this, arguments);\n                    }\n\n                    return beforeClose;\n                  }()\n                }).then(function (action) {\n                  _this.$message({\n                    showClose: true,\n                    type: \"success\",\n                    message: \"删除成功\"\n                  });\n\n                  _this.getCompanyDeptList();\n                });\n\n              case 3:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function handleDelete(_x2) {\n        return _handleDelete.apply(this, arguments);\n      }\n\n      return handleDelete;\n    }(),\n    //批量添加建筑\n    submitForm: function submitForm(formName) {\n      var _this2 = this;\n\n      this.$refs[formName].validate(function (valid) {\n        if (valid) {\n          _this2.confirmTbbuildinglocationAdd(_this2.entityVO);\n\n          _this2.entityVO.vos.locationName = \"\";\n          console.log(_this2.entityVO);\n        } else {\n          console.log(\"error submit!!\");\n          return false;\n        }\n      });\n    },\n    // 删除建筑输入框\n    removeDomain: function removeDomain(item) {\n      var index = this.entityVO.vos.indexOf(item);\n\n      if (index !== -1) {\n        this.entityVO.vos.splice(index, 1);\n      }\n    },\n    // 新增建筑输入框\n    addDomain: function addDomain() {\n      this.entityVO.vos.push({\n        uid: localStorage.getItem(\"uid\"),\n        locationName: \"\",\n        parentId: \"\"\n      });\n      console.log(this.entityVO);\n    },\n    // 添加楼层\n    querySearch: function () {\n      var _querySearch = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee7(queryString, cb) {\n        var res, i, restaurants1;\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.prev = 0;\n                _context7.next = 3;\n                return getCompanyDept(this.uid);\n\n              case 3:\n                res = _context7.sent;\n                this.restaurants = res.result;\n\n                for (i = 0; i < res.result.length; i++) {\n                  this.$set(this.restaurants[i], \"value\", this.restaurants[i].locationName);\n                }\n\n                restaurants1 = queryString ? this.restaurants.filter(this.createFilter(queryString)) : this.restaurants;\n                console.log(res);\n                _context7.next = 13;\n                break;\n\n              case 10:\n                _context7.prev = 10;\n                _context7.t0 = _context7[\"catch\"](0);\n                console.log(_context7.t0);\n\n              case 13:\n                // 调用 callback 返回建议列表的数据\n                cb(restaurants1);\n\n              case 14:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this, [[0, 10]]);\n      }));\n\n      function querySearch(_x6, _x7) {\n        return _querySearch.apply(this, arguments);\n      }\n\n      return querySearch;\n    }(),\n    createFilter: function createFilter(queryString) {\n      return function (restaurant) {\n        return restaurant.value.toLowerCase().indexOf(queryString.toLowerCase()) === 0;\n      };\n    },\n    handleSelect: function handleSelect(item) {\n      console.log(item);\n      localStorage.setItem(\"id\", item.id);\n      this.parentId = item.id;\n      this.jinXuan = true;\n    },\n    //批量添加楼层\n    submitForm1: function submitForm1(formName) {\n      var _this3 = this;\n\n      if (this.state1 == \"\") {\n        this.$message({\n          message: \"请选择建筑\"\n        });\n      } else {\n        this.$refs[formName].validate(function (valid) {\n          console.log(\"valid\", valid);\n\n          if (valid) {\n            _this3.confirmTbbuildinglocationAdd(_this3.entityVO1);\n\n            console.log(_this3.entityVO1);\n            _this3.dialogVisibleAdd1 = false;\n            _this3.jinXuan = false;\n          } else {\n            console.log(\"error submit!!\");\n            return false;\n          }\n        });\n      }\n    },\n    // 删除建筑输入框\n    removeDomain1: function removeDomain1(item) {\n      console.log(item);\n      var index = this.entityVO1.vos.indexOf(item);\n\n      if (index !== -1) {\n        this.entityVO1.vos.splice(index, 1);\n      }\n    },\n    // 新增楼层输入框\n    addDomain1: function addDomain1() {\n      if (this.state1 == \"\") {\n        this.$message({\n          message: \"请选择要添加的建筑\"\n        });\n      } else {\n        this.entityVO1.vos.push({\n          uid: localStorage.getItem(\"uid\"),\n          locationName: \"\",\n          parentId: this.parentId\n        });\n      }\n    },\n    //批量添加房间下面的是查询建筑\n    querySearch1: function () {\n      var _querySearch2 = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee8(queryString, cb) {\n        var res, i, restaurants2;\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.prev = 0;\n                _context8.next = 3;\n                return getCompanyDept(this.uid);\n\n              case 3:\n                res = _context8.sent;\n                this.restaurants1 = res.result;\n\n                for (i = 0; i < res.result.length; i++) {\n                  this.$set(this.restaurants1[i], \"value\", this.restaurants1[i].locationName);\n                }\n\n                restaurants2 = queryString ? this.restaurants1.filter(this.createFilter1(queryString)) : this.restaurants1;\n                console.log(res);\n                _context8.next = 13;\n                break;\n\n              case 10:\n                _context8.prev = 10;\n                _context8.t0 = _context8[\"catch\"](0);\n                console.log(_context8.t0);\n\n              case 13:\n                // 调用 callback 返回建议列表的数据\n                cb(restaurants2);\n\n              case 14:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this, [[0, 10]]);\n      }));\n\n      function querySearch1(_x8, _x9) {\n        return _querySearch2.apply(this, arguments);\n      }\n\n      return querySearch1;\n    }(),\n    createFilter1: function createFilter1(queryString) {\n      return function (restaurant) {\n        return restaurant.value.toLowerCase().indexOf(queryString.toLowerCase()) === 0;\n      };\n    },\n    handleSelect1: function handleSelect1(item) {\n      console.log(item);\n      this.restaurants2 = item.childrens;\n      this.jinXuan1 = true;\n    },\n    //批量添加房间下面的是查询楼层\n    querySearch2: function querySearch2(queryString, cb) {\n      console.log(this.restaurants2);\n\n      for (var i = 0; i < this.restaurants2.length; i++) {\n        this.$set(this.restaurants2[i], \"value\", this.restaurants2[i].locationName);\n      }\n\n      var restaurants3 = queryString ? this.restaurants2.filter(this.createFilter2(queryString)) : this.restaurants2; // 调用 callback 返回建议列表的数据\n\n      cb(restaurants3);\n    },\n    createFilter2: function createFilter2(queryString) {\n      return function (restaurant) {\n        return restaurant.value.toLowerCase().indexOf(queryString.toLowerCase()) === 0;\n      };\n    },\n    handleSelect2: function handleSelect2(item) {\n      console.log(item);\n      localStorage.setItem(\"floorId\", item.id);\n      this.jinXuan2 = true;\n    },\n    //批量添加房间\n    submitForm2: function submitForm2(formName) {\n      var _this4 = this;\n\n      if (this.state2 == \"\" || this.state3 == \"\") {\n        this.$message({\n          message: \"请选择建筑和楼层\"\n        });\n      } else {\n        this.$refs[formName].validate(function (valid) {\n          if (valid) {\n            console.log(\"valid\", valid);\n\n            _this4.confirmTbbuildinglocationAdd(_this4.entityVO2);\n\n            console.log(_this4.entityVO2);\n            _this4.dialogVisibleAdd2 = false;\n            _this4.jinXuan = false;\n            _this4.jinXuan1 = false;\n            _this4.jinXuan2 = false;\n          } else {\n            console.log(\"error submit!!\");\n            return false;\n          }\n        });\n      }\n    },\n    // 删除房间输入框\n    removeDomain2: function removeDomain2(item) {\n      console.log(item);\n      var index = this.entityVO2.vos.indexOf(item);\n\n      if (index !== -1) {\n        this.entityVO2.vos.splice(index, 1);\n      }\n    },\n    // 新增房间输入框\n    addDomain2: function addDomain2() {\n      if (this.state2 == \"\" || this.state3 == \"\") {\n        this.$message({\n          message: \"请选择建筑和楼层\"\n        });\n      } else {\n        this.entityVO2.vos.push({\n          uid: localStorage.getItem(\"uid\"),\n          locationName: \"\",\n          parentId: localStorage.getItem(\"floorId\")\n        });\n      }\n\n      console.log(this.entityVO2);\n    },\n    // 树形随意删除某一个\n    remove: function () {\n      var _remove = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee9(node, data) {\n        var parent, children, index;\n        return regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                console.log(node, data);\n                this.handleDelete(data.id);\n                parent = node.parent;\n                children = parent.data.childrens || parent.data;\n                index = children.findIndex(function (d) {\n                  return d.id === data.id;\n                });\n                children.splice(index, 1);\n\n              case 6:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function remove(_x10, _x11) {\n        return _remove.apply(this, arguments);\n      }\n\n      return remove;\n    }(),\n    // 树形随意编辑某一个\n    edit: function () {\n      var _edit = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee10(node, data) {\n        return regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                this.dialogVisible = true;\n                console.log(\"node\", node);\n                this.input1 = data.locationName;\n                console.log(\"data\", data);\n                this.editObj1 = data;\n\n              case 5:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function edit(_x12, _x13) {\n        return _edit.apply(this, arguments);\n      }\n\n      return edit;\n    }(),\n    // 退出编辑\n    endEdit: function endEdit() {\n      this.input2 = \"\";\n      this.dialogVisible = false;\n    },\n    // 提交修改后的信息\n    isEdit: function () {\n      var _isEdit = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee11() {\n        var res, result;\n        return regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                console.log(this.editObj1);\n                this.editObj.id = this.editObj1.id;\n                this.editObj.parent_id = this.editObj1.parentId;\n                this.editObj.locationName = this.input2;\n                _context11.next = 6;\n                return tbbuildinglocationedit(this.editObj);\n\n              case 6:\n                res = _context11.sent;\n                result = res.code;\n\n                if (result == 20000) {\n                  this.$message({\n                    showClose: true,\n                    message: \"编辑成功\",\n                    type: \"success\"\n                  });\n                  this.dialogVisible = false;\n                  this.input2 = \"\";\n                  this.getCompanyDeptList();\n                }\n\n              case 9:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function isEdit() {\n        return _isEdit.apply(this, arguments);\n      }\n\n      return isEdit;\n    }(),\n    // 编辑弹窗\n    handleClose: function handleClose(done) {\n      this.$confirm(\"确认关闭？\").then(function (_) {\n        done();\n      }).catch(function (_) {});\n    }\n  }\n};",null]}