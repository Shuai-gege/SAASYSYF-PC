{"remainingRequest":"D:\\workspace\\selfcompanyworkspace\\line-code\\vue-link-admin-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\workspace\\selfcompanyworkspace\\line-code\\vue-link-admin-master\\src\\views\\online\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\workspace\\selfcompanyworkspace\\line-code\\vue-link-admin-master\\src\\views\\online\\index.vue","mtime":1581075379331},{"path":"D:\\workspace\\selfcompanyworkspace\\line-code\\vue-link-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\workspace\\selfcompanyworkspace\\line-code\\vue-link-admin-master\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\workspace\\selfcompanyworkspace\\line-code\\vue-link-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\workspace\\selfcompanyworkspace\\line-code\\vue-link-admin-master\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {getToken} from '@/utils/auth'\nimport {\n    onlineList, deleteOnline, addOnline\n} from '@/api/online/twebonline'\nimport Pagination from '@/components/Pagination' // Secondary package based on el-pagination\nimport {formatTimeToStr} from '@/utils/dateUtil'\n\n\nconst token = getToken()\nconst onlineVO = {\n    id: '',\n    tableName: '',  // 表名\n    fontBackstage: '',  // 前端还是后台\n    createTime: '',  // 创建时间\n    fontFilePath: '', // 前端生成的文件路径\n}\n\nexport default {\n    name: `Online`,\n    components: {Pagination},\n    data() {\n        return {\n            list: null,\n            total: 0,\n            tableKey: 0,\n            listLoading: false,\n            listQuery: {\n                page: 1,\n                limit: 10,\n                tableName: '',  // 表名\n                fontBackstage: '',  // 前端还是后台\n                createTime: ''  // 创建时间\n\n            },\n            table_name: '', // 生成前端后端代码表名\n            file_path: '' , // 前端生成的文件路径\n            headersObj: {'LinkAdmin-Token': token},\n            activeName: 'first',\n            dialogVisible: false,\n            dialogType: 'new',\n            onlineVO: Object.assign({}, onlineVO),\n            rules: {\n                examineStatus: [{required: true, message: '请选择审核状态', trigger: 'change'}],\n            }\n        }\n    },\n    watch: {\n        searchDeptName(val) {\n            this.$refs.serchDeptTree.filter(val)\n        }\n    },\n    created() {\n        this.getList()\n    },\n    methods: {\n        async getList() {\n            this.listLoading = true\n            // If the Promise is rejected, the rejected value is thrown.\n            try {\n                const res = await onlineList(this.listQuery)\n                this.listLoading = false\n                this.list = res.result.rows\n                this.total = res.result.records\n            } catch (e) {\n                this.listLoading = false\n            }\n        },\n        // 查询\n        handleSearch() {\n            this.getList()\n        },\n        // 点击删除按钮触发 删除生成的表的记录\n        async handleDelete(scope) {\n            const h = this.$createElement;\n            const tt = scope.row;\n            const id = tt.id;\n            this.onlineVO.id = id;\n            this.onlineVO.tableName = tt.tableName;\n            this.onlineVO.fontBackstage = tt.fontBackstage;\n\n            this.$msgbox({\n                title: '删除消息',\n                message: h('p', null, [\n                    h('span', null, '确定要删除 '),\n                    h('i', {style: 'color: teal'}, tt.tableName + ' 的历史记录吗?')\n                ]),\n                showCancelButton: true,\n                confirmButtonText: '确定',\n                cancelButtonText: '取消',\n                beforeClose: async (action, instance, done) => {\n                    if (action === 'confirm') {\n                        const res = await deleteOnline(this.onlineVO);\n                        if (res.code == 20000) {\n                            done();\n                        }\n                    } else {\n                        done();\n                    }\n                }\n            }).then(action => {\n                this.$message({\n                    showClose: true,\n                    type: 'success',\n                    message: '删除成功'\n                });\n                this.getList();\n            });\n\n        },\n        // 审核时间\n        formatDateTimeCreate(row, column) {\n            return formatTimeToStr(row.createTime, 'yyyy-MM-dd hh:mm:ss')\n        },\n\n        // 前后台显示转换\n        onlineStatus(row, column) {\n            const tt = row.fontBackstage;\n            if (tt == '0') {\n                return '后端';\n            }\n            if (tt == '1') {\n                return '前端';\n            }\n        },\n\n        // 生成后端代码方法\n        async createBackstageCode() {\n            this.onlineVO.tableName = this.table_name.toLowerCase();\n            this.onlineVO.fontBackstage = 0;\n            const res = await addOnline(this.onlineVO);\n            const code = res.code;\n            if (code == 20000) {\n                this.getList();\n            }\n        },\n        // 生成前端代码方法\n        async createFontCode() {\n            this.onlineVO.tableName = this.table_name.toLowerCase();\n            this.onlineVO.fontBackstage = 1;\n            if(this.file_path == '' || this.file_path == null || this.file_path.trim() == '' || this.file_path.trim() == null || this.file_path.trim() == undefined ){\n                this.$message.error('生成前端代码必须得有路径哦~');\n                return ;\n            }\n            this.onlineVO.fontFilePath = this.file_path;\n            const res = await addOnline(this.onlineVO);\n            debugger;\n            const code = res.code;\n            if (code == 20000) {\n                this.getList();\n            }\n\n\n        },\n\n    /*    createFontCode(_result) {\n           // this.createViewFolderAndFile();\n            for (let i = 0; i < _result.length; i++) {\n                const _field = _result._field;     // 字段 名称\n                const _type = _result._type;      // 字段类型\n                const _collation = _result._collation; // 编码格式\n                const _null = _result._null;    // 是否为空\n                const _key = _result._key;     // 主键，外键类型\n                const _default = _result._default;   // 默认值\n                const _extra = _result._extra;     // 主键模式，自增等。。。\n                const _privileges = _result._privileges; // 字段权限\n                const _comment = _result._comment; // 字段注释\n\n            }\n        },*/\n        // 在views文件夹下创建文件夹和文件，文件夹名称根据表名来定义\n        createViewFolderAndFile() {\n            alert(\"====\" + this.table_name);\n            // 需要创建的文件夹的名字\n            const folder_name = this.tableNameConvert(this.table_name);\n            // 获取当前文件所在路径\n            const _file_path = document.location.toString();\n\n\n        },\n        // 将表名中的下划线去掉，并将大写转换为小写\n        tableNameConvert(table_name) {\n            table_name = table_name.replace(\"_\", \"\");\n            table_name = table_name.toLowerCase();\n            return table_name;\n        },\n        getPathRootJump() {\n            var pathName = window.location.pathname.substring(1);\n            var webName = pathName == '' ? '' : pathName.substring(0, pathName.indexOf('/'));\n            var path_root = window.location.protocol + '//' + window.location.host + '/' + webName + '/';\n            return path_root;\n        },\n        // 点击编辑按钮触发\n        /*handleEdit(scope) {\n            debugger;\n            this.dialogVisible = true\n            this.onlineVO = deepClone(scope.row)\n            const tt = this.onlineVO.createTime;\n            this.onlineVO.createTime = this.formatDateTimeTemp(tt);\n        },*/\n        // 编辑功能结束，点击确定按钮触发\n        /*async confirmTask() {\n            this.onlineVO.createTime = this.formatDateTimeTemp(this.onlineVO.createTime);\n            const res = await editTask(this.onlineVO);\n            const result = res.result;\n            if (result) {\n                this.$message({\n                    showClose: true,\n                    message: '编辑成功',\n                    type: 'success'\n                })\n                this.dialogVisible = false;\n                this.getList();\n            }\n        }*/\n    }\n}\n",null]}