{"remainingRequest":"D:\\ysyf\\iguard-vue01\\node_modules\\thread-loader\\dist\\cjs.js!D:\\ysyf\\iguard-vue01\\node_modules\\babel-loader\\lib\\index.js!D:\\ysyf\\iguard-vue01\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\ysyf\\iguard-vue01\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ysyf\\iguard-vue01\\src\\views\\permission\\role.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ysyf\\iguard-vue01\\src\\views\\permission\\role.vue","mtime":1587087040913},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1586085021683},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1586085236938},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\babel-loader\\lib\\index.js","mtime":1586085013966},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1586085021683},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\vue-loader\\lib\\index.js","mtime":1586085255129}],"contextDependencies":[],"result":["import _toConsumableArray from \"D:\\\\ysyf\\\\iguard-vue01\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"D:\\\\ysyf\\\\iguard-vue01\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport permission from '@/directive/permission/index.js'; // 权限判断指令\n\nimport { roleList, addRole, updateRole, deleteRole, saveDataScope, queryDataScope } from '@/api/permission/role';\nimport { permissions, permissionsByRole, subPermissions } from '@/api/permission/permission';\nimport { subDepartments } from '@/api/permission/department';\nimport { dictInfo } from '@/api/permission/dict';\nimport Pagination from '@/components/Pagination'; // Secondary package based on el-pagination\n\nimport { deepClone } from '@/utils';\nvar defaultRole = {\n  id: undefined,\n  name: '',\n  description: '',\n  permIds: [],\n  data_scope: undefined,\n  deptIds: []\n};\nexport default {\n  name: 'Role',\n  components: {\n    Pagination: Pagination\n  },\n  directives: {\n    permission: permission\n  },\n  data: function data() {\n    return {\n      tableKey: 0,\n      list: null,\n      total: 0,\n      listLoading: false,\n      listQuery: {\n        page: 1,\n        limit: 10,\n        name: ''\n      },\n      role: Object.assign({}, defaultRole),\n      dialogVisible: false,\n      dialogType: 'new',\n      checkStrictly: false,\n      defaultProps: {\n        children: 'childrens',\n        label: 'name'\n      },\n      permissions: [],\n      permissionsByRole: [],\n      dataScopeDialogVisible: false,\n      departments: [],\n      dataScopes: [],\n      rules: {\n        name: [{\n          required: true,\n          message: '请输入角色名',\n          trigger: 'blur'\n        }, {\n          min: 1,\n          max: 15,\n          message: '长度在 1 到 15 个字符',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  created: function created() {\n    this.getList();\n    this.getPermissions();\n    this.getDepartments();\n    this.getDataScopes();\n  },\n  methods: {\n    getList: function () {\n      var _getList = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var res;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.listLoading = true; // If the Promise is rejected, the rejected value is thrown.\n\n                _context.prev = 1;\n                _context.next = 4;\n                return roleList(this.listQuery);\n\n              case 4:\n                res = _context.sent;\n                this.listLoading = false;\n                this.list = res.result.rows;\n                this.total = res.result.records;\n                _context.next = 13;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](1);\n                this.listLoading = false;\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 10]]);\n      }));\n\n      function getList() {\n        return _getList.apply(this, arguments);\n      }\n\n      return getList;\n    }(),\n    formatDataScope: function formatDataScope(row, column) {\n      var val = '';\n\n      if (row.data_scope != null) {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = this.dataScopes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var item = _step.value;\n\n            if (parseInt(item.data_key) === row.data_scope) {\n              val = item.data_value;\n              break;\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n\n      return val;\n    },\n    getPermissions: function () {\n      var _getPermissions = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var res;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return subPermissions();\n\n              case 2:\n                res = _context2.sent;\n                this.permissions = res.result;\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getPermissions() {\n        return _getPermissions.apply(this, arguments);\n      }\n\n      return getPermissions;\n    }(),\n    getPermissionsByRole: function () {\n      var _getPermissionsByRole = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3(roleId) {\n        var res;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return permissionsByRole(roleId);\n\n              case 2:\n                res = _context3.sent;\n                this.permissionsByRole = res.result;\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getPermissionsByRole(_x) {\n        return _getPermissionsByRole.apply(this, arguments);\n      }\n\n      return getPermissionsByRole;\n    }(),\n    getDataScopes: function () {\n      var _getDataScopes = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4() {\n        var res;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return dictInfo('data_scope');\n\n              case 2:\n                res = _context4.sent;\n                this.dataScopes = res.result;\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getDataScopes() {\n        return _getDataScopes.apply(this, arguments);\n      }\n\n      return getDataScopes;\n    }(),\n    getDepartments: function () {\n      var _getDepartments = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee5() {\n        var res;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return subDepartments();\n\n              case 2:\n                res = _context5.sent;\n                this.departments = res.result;\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getDepartments() {\n        return _getDepartments.apply(this, arguments);\n      }\n\n      return getDepartments;\n    }(),\n    handleSearch: function handleSearch() {\n      this.getList();\n    },\n    // 权限树\n    checkPermissionTree: function checkPermissionTree(currentObj, treeStatus) {\n      var currentNode = this.$refs.tree.getNode(currentObj); // 用于：父子节点严格互不关联时，父节点勾选变化时通知子节点同步变化，实现单向关联。\n\n      var selected = treeStatus.checkedKeys.indexOf(currentNode.key); // -1未选中\n      // 选中\n\n      if (selected !== -1) {\n        // 子节点只要被选中父节点就被选中\n        this.selectedParent(currentNode); // 统一处理子节点为相同的勾选状态\n\n        this.uniteChildSame(currentNode, true);\n      } else {\n        // 未选中 处理子节点全部未选中\n        if (currentNode.childNodes) {\n          if (currentNode.childNodes.length !== 0) {\n            this.uniteChildSame(currentNode, false);\n          }\n        }\n      }\n    },\n    // 统一处理子节点为相同的勾选状态\n    uniteChildSame: function uniteChildSame(currentNode, isSelected) {\n      this.$refs.tree.setChecked(currentNode.key, isSelected);\n\n      if (currentNode.childNodes) {\n        for (var i = 0; i < currentNode.childNodes.length; i++) {\n          this.uniteChildSame(currentNode.childNodes[i], isSelected);\n        }\n      }\n    },\n    // 统一处理父节点为选中\n    selectedParent: function selectedParent(currentNode) {\n      if (currentNode.parent.key !== undefined) {\n        this.$refs.tree.setChecked(currentNode.parent, true);\n        this.selectedParent(currentNode.parent);\n      }\n    },\n    handleCreate: function handleCreate() {\n      this.role = Object.assign({}, defaultRole);\n\n      if (this.$refs.tree) {\n        this.$refs.tree.setCheckedNodes([]);\n      }\n\n      this.checkStrictly = true;\n      this.dialogType = 'new';\n      this.dialogVisible = true;\n    },\n    generateArr: function generateArr(routes) {\n      var _this = this;\n\n      var data = [];\n      routes.forEach(function (route) {\n        data.push(route);\n\n        if (route.childrens) {\n          var temp = _this.generateArr(route.childrens);\n\n          if (temp.length > 0) {\n            data = [].concat(_toConsumableArray(data), _toConsumableArray(temp));\n          }\n        }\n      });\n      return data;\n    },\n    handleEdit: function () {\n      var _handleEdit = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee6(scope) {\n        var _this2 = this;\n\n        var res;\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                this.dialogType = 'edit';\n                this.dialogVisible = true;\n                this.checkStrictly = true;\n                this.role = deepClone(scope.row);\n                _context6.next = 6;\n                return permissionsByRole(this.role.id);\n\n              case 6:\n                res = _context6.sent;\n                this.permissionsByRole = res.result;\n                this.$nextTick(function () {\n                  if (_this2.permissionsByRole != null) {\n                    _this2.$refs.tree.setCheckedNodes(_this2.generateArr(_this2.permissionsByRole));\n                  } else {\n                    _this2.$refs.tree.setCheckedNodes([]);\n                  }\n                });\n\n              case 9:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function handleEdit(_x2) {\n        return _handleEdit.apply(this, arguments);\n      }\n\n      return handleEdit;\n    }(),\n    confirmRole: function () {\n      var _confirmRole = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee7() {\n        var isEdit;\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                isEdit = this.dialogType === 'edit';\n                this.role.permIds = this.$refs.tree.getCheckedKeys();\n\n                if (!isEdit) {\n                  _context7.next = 7;\n                  break;\n                }\n\n                _context7.next = 5;\n                return updateRole(this.role);\n\n              case 5:\n                _context7.next = 9;\n                break;\n\n              case 7:\n                _context7.next = 9;\n                return addRole(this.role);\n\n              case 9:\n                this.dialogVisible = false;\n                this.$message({\n                  showClose: true,\n                  message: '保存成功',\n                  type: 'success'\n                });\n                this.getList();\n\n              case 12:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function confirmRole() {\n        return _confirmRole.apply(this, arguments);\n      }\n\n      return confirmRole;\n    }(),\n    handleDelete: function handleDelete(_ref) {\n      var _this3 = this;\n\n      var row = _ref.row;\n      this.$confirm('确认删除角色?', '警告', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(\n      /*#__PURE__*/\n      _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee8() {\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return deleteRole(row.id);\n\n              case 2:\n                _this3.$message({\n                  showClose: true,\n                  message: '删除成功',\n                  type: 'success'\n                });\n\n                _this3.getList();\n\n              case 4:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }))).catch(function (err) {\n        console.error(err);\n      });\n    },\n    setCheckDeptTree: function () {\n      var _setCheckDeptTree = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee9(roleId) {\n        var res;\n        return regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return queryDataScope(roleId);\n\n              case 2:\n                res = _context9.sent;\n                this.$refs.deptTree.setCheckedKeys(res.result);\n\n              case 4:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function setCheckDeptTree(_x3) {\n        return _setCheckDeptTree.apply(this, arguments);\n      }\n\n      return setCheckDeptTree;\n    }(),\n    handleDataScope: function handleDataScope(row) {\n      this.role = deepClone(row);\n\n      if (this.$refs.deptTree) {\n        this.$refs.deptTree.setCheckedKeys([]);\n      }\n\n      if (row.data_scope === 2) {\n        this.setCheckDeptTree(row.id);\n      }\n\n      this.dataScopeDialogVisible = true;\n    },\n\n    /** 提交按钮（数据权限） */\n    submitDataScope: function () {\n      var _submitDataScope = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee10() {\n        return regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                if (!this.role.id) {\n                  _context10.next = 7;\n                  break;\n                }\n\n                this.role.deptIds = this.$refs.deptTree.getCheckedKeys();\n                _context10.next = 4;\n                return saveDataScope(this.role);\n\n              case 4:\n                this.dataScopeDialogVisible = false;\n                this.$message({\n                  showClose: true,\n                  message: '操作成功',\n                  type: 'success'\n                });\n                this.getList();\n\n              case 7:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function submitDataScope() {\n        return _submitDataScope.apply(this, arguments);\n      }\n\n      return submitDataScope;\n    }()\n  }\n};",null]}