{"remainingRequest":"D:\\ysyf\\iguard-vue01\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ysyf\\iguard-vue01\\src\\views\\permission\\user.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ysyf\\iguard-vue01\\src\\views\\permission\\user.vue","mtime":1587087024058},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1586085021683},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\babel-loader\\lib\\index.js","mtime":1586085013966},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1586085021683},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\vue-loader\\lib\\index.js","mtime":1586085255129}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Treeselect from '@riophae/vue-treeselect'\nimport '@riophae/vue-treeselect/dist/vue-treeselect.css'\nimport permission from '@/directive/permission/index.js' // 权限判断指令\nimport {\n  userList,\n  addUser,\n  updateUser,\n  updateState\n} from '@/api/permission/user'\nimport {\n  subDepartments,\n  subDeptByDeptId,\n  subCompanyList,\n  companySubDeptList\n} from '@/api/permission/department'\nimport { jobs } from '@/api/permission/job'\nimport { roles } from '@/api/permission/role'\nimport { deepClone } from '@/utils'\nimport Pagination from '@/components/Pagination'\nimport {getCompanyDept} from \"../../api/iguard/tbbuildinglocation/tbbuildinglocation\"; // Secondary package based on el-pagination\nconst defaultUser = {\n  uid: '',\n  name: '',\n  password: '',\n  vserName: '',\n  mobile: '',\n  state: 1,\n  email: '',\n  deptid: undefined,\n  jobid: undefined,\n  jobName: '',\n  deptName: '',\n  roleIds: [],\n  companyId: undefined,\n  isEqualAdmin:false\n}\n\nexport default {\n  name: 'User',\n  components: { Pagination, Treeselect },\n  directives: { permission },\n  data() {\n    const checkPhoneNo = (rule, value, callback) => {\n      if (!value) {\n        return callback(new Error('请输入正确的账号'));\n      }\n      if(!(/^1(3|4|5|6|7|8|9)\\d{9}$/.test(value))){\n        return callback(new Error('请输入正确的账号'));\n      }\n    };\n    return {\n      tableKey: 0,\n      list: null,\n      total: 0,\n      listLoading: false,\n      listQuery: {\n        page: 1,\n        limit: 10,\n        vserName: '',\n        name: '',\n        mobile: '',\n        deptid: undefined,\n        state: undefined\n      },\n      searchDeptName: '',\n      stateOptions: [{ label: '禁用', value: 0 }, { label: '启用', value: 1 }],\n      user: Object.assign({}, defaultUser),\n      defaultProps: {\n        children: 'childrens',\n        label: 'name'\n      },\n      departments: [],\n      // companies:[],\n      // companyDepts:[],\n      roles: [],\n      activeName: 'first',\n      dialogVisible: false,\n      dialogType: 'new',\n\n      rules: {\n        name: [\n          { required: true, message: '请输入正确的账号', trigger: 'blur' },\n          { validator: checkPhoneNo, trigger: 'blur' },\n        ],\n        // password: [\n        //   { required: true, message: '请输入密码', trigger: 'blur' },\n        //   { min: 2, max: 20, message: '长度在 2 到 20 个字符', trigger: 'blur' }\n        // ],\n        vserName: [\n          { required: true, message: '请输入用户名', trigger: 'blur' },\n          { min: 2, max: 10, message: '长度在 2 到 10 个字符', trigger: 'blur' }\n        ],\n        deptid: [{ required: true, message: '请选择部门', trigger: 'change' }],\n        state: [{ required: true, message: '请选择状态', trigger: 'change' }]\n      }\n    }\n  },\n  watch: {\n    searchDeptName(val) {\n      this.$refs.serchDeptTree.filter(val)\n    }\n  },\n  created() {},\n  mounted() {\n    this.getList();\n    this.getSubDepartments();\n    // this.getSubCompanies()\n    this.getJobs();\n    this.getRoles();\n  },\n  methods: {\n    async getList() {\n      this.listLoading = true\n      // If the Promise is rejected, the rejected value is thrown.\n      try {\n        const res = await userList(this.listQuery)\n        this.listLoading = false\n        this.list = res.result.rows\n        this.total = res.result.records\n      } catch (e) {\n        this.listLoading = false\n      }\n    },\n    handleSearch() {\n      this.getList()\n    },\n    formatDept(row, column) {\n      return row.deptName\n    },\n    formatRole(row, column) {\n      var roleNames = []\n      row.roles.forEach(role => {\n        roleNames.push(role.name)\n      })\n      return roleNames.join(' , ')\n    },\n    // 用户状态修改\n    handleStateChange(row) {\n      const text = row.state === 1 ? '启用' : '禁用'\n      this.$confirm(\n        '确认要 [' + text + '] [' + row.name + '] 用户吗?',\n        '警告',\n        {\n          confirmButtonText: '确定',\n          cancelButtonText: '取消',\n          type: 'warning'\n        }\n      )\n        .then(async() => {\n          await updateState({ uid: row.uid, state: row.state })\n          this.$message({\n            message: text + '成功',\n            type: 'success'\n          })\n        })\n        .catch(err => {\n          console.error(err)\n          row.state = row.state === 0 ? 1 : 0\n        })\n    },\n\n\n    async getSubDepartments() {\n      const res = await subDepartments()\n      const result = res.result\n      this.diGuiTree(result)\n      this.departments = result;\n    },\n\n    async getSubCompanies() {\n      const res = await subCompanyList()\n      const result = res.result\n      this.diGuiTree(result)\n      this.companies = result;\n    },\n\n    async getCompanyDept(data){\n      console.log(\"======  ==== \" + data.id);\n      const res = await subDeptByDeptId(data.id);\n      const result = res.result;\n      this.diGuiTree(result);\n      this.companyDepts = result;\n    },\n\n    // async getDepartments(deptId){\n    //   const res = await subDeptByDeptId(deptId);\n    //   const result = res.result;\n    //   this.diGuiTree(result);\n    //   this.companies = result;\n    // },\n\n\n    async getJobs() {\n      const res = await jobs()\n      this.jobs = res.result\n    },\n    async getRoles() {\n      const res = await roles()\n      this.roles = res.result\n    },\n    clearSearchDept() {\n      this.listQuery.deptid = undefined\n    },\n    diGuiTree(item) {\n      // 递归便利树结构\n      item.forEach(item => {\n        item.childrens === '' ||\n        item.childrens === undefined ||\n        item.childrens === null\n          ? delete item.childrens\n          : this.diGuiTree(item.childrens)\n      })\n    },\n    normalizer(node) {\n      return {\n        id: node.id,\n        label: node.name,\n        children: node.childrens\n      }\n    },\n    queryJobSearch(queryString, cb) {\n      var jobs = this.jobs\n      var results = queryString\n        ? jobs.filter(this.createJobFilter(queryString))\n        : jobs\n      // 调用 callback 返回建议列表的数据\n      cb(results)\n    },\n    createJobFilter(queryString) {\n      return jobs => {\n        return jobs.name.toLowerCase().indexOf(queryString.toLowerCase()) === 0\n      }\n    },\n    handleJobSelect(item) {\n      this.user.jobid = item.id\n      this.user.jobName = item.name\n    },\n    handleCreate() {\n      this.dialogType = 'new'\n      this.activeName = 'first'\n      this.dialogVisible = true\n      this.user = Object.assign({}, defaultUser)\n    },\n    handleEdit(scope) {\n      this.dialogType = 'edit'\n      this.activeName = 'first'\n      this.dialogVisible = true\n      scope.row.roleIds = []\n      this.user = deepClone(scope.row)\n\n      this.user.password = '';\n      if (this.user.roles) {\n        const roleIds = this.user.roleIds\n        this.user.roles.forEach(role => {\n          roleIds.push(role.id)\n        })\n      }\n    },\n    async confirmUser() {\n      const isEdit = this.dialogType === 'edit'\n      if (isEdit) {\n        await updateUser(this.user)\n      } else {\n        if (this.user.password.length < 1){\n          this.user.password = this.user.name;\n        }\n        await addUser(this.user)\n      }\n      this.dialogVisible = false\n      this.$message({\n        showClose: true,\n        message: '保存成功',\n        type: 'success'\n      })\n      this.getList()\n    },\n    // 节点单击事件\n    handleSearchDeptNode(data) {\n      this.isShowSelect = false\n      this.listQuery.deptid = data.id\n      this.getList()\n    },\n\n    // 筛选节点\n    filterNode(value, data) {\n      if (!value) return true\n      return data.name.indexOf(value) !== -1\n    }\n  }\n}\n",null]}