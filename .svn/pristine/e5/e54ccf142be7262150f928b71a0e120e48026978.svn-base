{"remainingRequest":"D:\\ysyf\\iguard-vue01\\node_modules\\thread-loader\\dist\\cjs.js!D:\\ysyf\\iguard-vue01\\node_modules\\babel-loader\\lib\\index.js!D:\\ysyf\\iguard-vue01\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\ysyf\\iguard-vue01\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ysyf\\iguard-vue01\\src\\views\\angel\\person\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ysyf\\iguard-vue01\\src\\views\\angel\\person\\index.vue","mtime":1586084705000},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1586085021683},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1586085236938},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\babel-loader\\lib\\index.js","mtime":1586085013966},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1586085021683},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\vue-loader\\lib\\index.js","mtime":1586085255129}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"D:\\\\ysyf\\\\iguard-vue01\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getToken } from \"@/utils/auth\";\nimport Treeselect from \"@riophae/vue-treeselect\";\nimport { personlist, personedit, persondelete, personadd } from \"@/api/angel/person/person\";\nimport permission from \"@/directive/permission/index.js\"; // 权限判断指令\n\nimport { departments, diGuiTree } from \"@/api/permission/department\";\nimport Pagination from \"@/components/Pagination\"; // Secondary package based on el-pagination\n\nimport { formatTimeToStr } from \"@/utils/dateUtil\";\nimport { deepClone } from \"@/utils\";\nimport { roles } from \"@/api/permission/role\";\nvar token = getToken();\nvar entityVO = {\n  personId: \"\",\n  personNo: \"\",\n  TenantId: \"\",\n  departmentId: \"\",\n  personName: \"\",\n  tagId: \"\",\n  tagMac: \"\",\n  personSex: \"\",\n  personPhone: \"\",\n  personIdentityno: \"\",\n  personRole: \"\",\n  personApp: \"\",\n  locationBuildingid: \"\",\n  locationFloor: \"\",\n  locationPoiid: \"\"\n};\nexport default {\n  name: \"person\",\n  components: {\n    Pagination: Pagination,\n    Treeselect: Treeselect\n  },\n  directives: {\n    permission: permission\n  },\n  data: function data() {\n    return {\n      defaultProps: {\n        children: \"childrens\",\n        label: \"name\"\n      },\n      list: null,\n      listRole: null,\n      total: 0,\n      tableKey: 0,\n      listLoading: false,\n      M: \"\",\n      //男\n      F: \"\",\n      //女\n      // visitor: \"\", //访客\n      // patrol: \"\", //巡更\n      departments: [],\n      // 部门列表\n      listQuery: {\n        page: 1,\n        limit: 10,\n        personId: \"\",\n        personNo: \"\",\n        TenantId: \"\",\n        departmentId: \"\",\n        personName: \"\",\n        tagId: \"\",\n        tagMac: \"\",\n        personSex: \"\",\n        personPhone: \"\",\n        personIdentityno: \"\",\n        personRole: \"\",\n        personApp: \"\",\n        locationBuildingid: \"\",\n        locationFloor: \"\",\n        locationPoiid: \"\"\n      },\n      headersObj: {\n        \"LinkAdmin-Token\": token\n      },\n      activeName: \"first\",\n      dialogVisibleEdit: false,\n      dialogVisibleAdd: false,\n      dialogType: \"new\",\n      entityVO: Object.assign({}, entityVO)\n    };\n  },\n  watch: {\n    searchDeptName: function searchDeptName(val) {\n      this.$refs.serchDeptTree.filter(val);\n    }\n  },\n  created: function created() {\n    this.getList();\n    this.getDepartments();\n    this.getRoleList();\n  },\n  methods: {\n    getList: function () {\n      var _getList = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var res;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.listLoading = true; // If the Promise is rejected, the rejected value is thrown.\n\n                _context.prev = 1;\n                _context.next = 4;\n                return personlist(this.listQuery);\n\n              case 4:\n                res = _context.sent;\n                this.listLoading = false;\n                this.list = res.result.rows;\n                this.total = res.result.records;\n                _context.next = 13;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](1);\n                this.listLoading = false;\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 10]]);\n      }));\n\n      function getList() {\n        return _getList.apply(this, arguments);\n      }\n\n      return getList;\n    }(),\n    getRoleList: function () {\n      var _getRoleList = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var res;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.listLoading = true; // If the Promise is rejected, the rejected value is thrown.\n\n                _context2.prev = 1;\n                _context2.next = 4;\n                return roles();\n\n              case 4:\n                res = _context2.sent;\n                this.listLoading = false;\n                this.listRole = res.result; //  this.total = res.result.records\n\n                _context2.next = 12;\n                break;\n\n              case 9:\n                _context2.prev = 9;\n                _context2.t0 = _context2[\"catch\"](1);\n                this.listLoading = false;\n\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[1, 9]]);\n      }));\n\n      function getRoleList() {\n        return _getRoleList.apply(this, arguments);\n      }\n\n      return getRoleList;\n    }(),\n    // 查询部门列表\n    getDepartments: function () {\n      var _getDepartments = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3() {\n        var res, result;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return departments();\n\n              case 2:\n                res = _context3.sent;\n                result = res.result;\n                this.diGuiTree(result);\n                this.departments = [{\n                  id: 0,\n                  name: \"部门树\",\n                  childrens: result\n                }];\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getDepartments() {\n        return _getDepartments.apply(this, arguments);\n      }\n\n      return getDepartments;\n    }(),\n    diGuiTree: function diGuiTree(item) {\n      var _this = this;\n\n      // 递归便利树结构\n      item.forEach(function (item) {\n        item.childrens === \"\" || item.childrens === undefined || item.childrens === null ? delete item.childrens : _this.diGuiTree(item.childrens);\n      });\n    },\n    filterNode: function filterNode(value, data) {\n      if (!value) return true;\n      return data.name.indexOf(value) !== -1;\n    },\n    // 查询\n    handleSearch: function handleSearch() {\n      this.getList();\n    },\n    // 点击编辑按钮触发\n    handleEdit: function handleEdit(scope) {\n      this.dialogVisibleEdit = true;\n      this.entityVO = deepClone(scope.row);\n    },\n    // 点击新增按钮触发\n    handleAdd: function handleAdd(scope) {\n      this.dialogVisibleAdd = true;\n    },\n    // 编辑功能结束，点击确定按钮触发\n    confirmPersonEdit: function () {\n      var _confirmPersonEdit = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4() {\n        var res, result;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return personedit(this.entityVO);\n\n              case 2:\n                res = _context4.sent;\n                result = res.code;\n\n                if (result == 20000) {\n                  this.$message({\n                    showClose: true,\n                    message: \"编辑成功\",\n                    type: \"success\"\n                  });\n                  this.dialogVisibleEdit = false;\n                  this.getList();\n                }\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function confirmPersonEdit() {\n        return _confirmPersonEdit.apply(this, arguments);\n      }\n\n      return confirmPersonEdit;\n    }(),\n    // 新增功能结束，点击确定按钮触发\n    confirmPersonAdd: function () {\n      var _confirmPersonAdd = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee5() {\n        var res, result;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return personadd(this.entityVO);\n\n              case 2:\n                res = _context5.sent;\n                result = res.code;\n\n                if (result == 20000) {\n                  this.$message({\n                    showClose: true,\n                    message: \"新增成功\",\n                    type: \"success\"\n                  });\n                  this.dialogVisibleAdd = false;\n                  this.getList();\n                }\n\n              case 5:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function confirmPersonAdd() {\n        return _confirmPersonAdd.apply(this, arguments);\n      }\n\n      return confirmPersonAdd;\n    }(),\n    // 点击删除按钮触发 删除生成的表的记录\n    handleDelete: function () {\n      var _handleDelete = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee7(scope) {\n        var _this2 = this;\n\n        var h;\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                h = this.$createElement;\n                this.entityVO = deepClone(scope.row);\n                this.$msgbox({\n                  title: \"删除消息\",\n                  message: h(\"p\", null, [h(\"span\", null, \"确定要删除 \"), h(\"i\", {\n                    style: \"color: teal\"\n                  }, \"这条记录吗?\")]),\n                  showCancelButton: true,\n                  confirmButtonText: \"确定\",\n                  cancelButtonText: \"取消\",\n                  beforeClose: function () {\n                    var _beforeClose = _asyncToGenerator(\n                    /*#__PURE__*/\n                    regeneratorRuntime.mark(function _callee6(action, instance, done) {\n                      var res;\n                      return regeneratorRuntime.wrap(function _callee6$(_context6) {\n                        while (1) {\n                          switch (_context6.prev = _context6.next) {\n                            case 0:\n                              if (!(action === \"confirm\")) {\n                                _context6.next = 7;\n                                break;\n                              }\n\n                              _context6.next = 3;\n                              return persondelete(_this2.entityVO);\n\n                            case 3:\n                              res = _context6.sent;\n\n                              if (res.code == 20000) {\n                                done();\n                              }\n\n                              _context6.next = 8;\n                              break;\n\n                            case 7:\n                              done();\n\n                            case 8:\n                            case \"end\":\n                              return _context6.stop();\n                          }\n                        }\n                      }, _callee6);\n                    }));\n\n                    function beforeClose(_x2, _x3, _x4) {\n                      return _beforeClose.apply(this, arguments);\n                    }\n\n                    return beforeClose;\n                  }()\n                }).then(function (action) {\n                  _this2.$message({\n                    showClose: true,\n                    type: \"success\",\n                    message: \"删除成功\"\n                  });\n\n                  _this2.getList();\n                });\n\n              case 3:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function handleDelete(_x) {\n        return _handleDelete.apply(this, arguments);\n      }\n\n      return handleDelete;\n    }(),\n    // 性别转换 性别 F--女性，M--男性\n    sexStatus: function sexStatus(row, column) {\n      var sex = row.personSex;\n\n      if (sex == \"F\" || sex == \"2\") {\n        return \"女\";\n      }\n\n      if (sex == \"M\" || sex == \"1\") {\n        return \"男\";\n      }\n    },\n    // 角色转换  角色  1-普通，2-前台，3-主管\n    roleStatus: function roleStatus(row, column) {\n      var role = row.personRole;\n\n      if (role == \"1\") {\n        return \"普通\";\n      }\n\n      if (role == \"2\") {\n        return \"前台\";\n      }\n\n      if (role == \"3\") {\n        return \"主管\";\n      }\n    },\n    // visitor-访客，patrol-巡更\n    personAppStatus: function personAppStatus(row, column) {\n      var person_app = row.personApp;\n      console.log(person_app);\n      console.log(row);\n      console.log(column);\n\n      if (person_app == \"visitor\" || person_app == \"1\") {\n        return \"访客\";\n      }\n\n      if (person_app == \"patrol\" || person_app == \"2\") {\n        return \"巡更\";\n      }\n    } //select框值改变时候触发的事件\n\n    /*selectChange(e){\n                var arrNew = [];\n                var dataLength = this.departments.length;\n                var eleng = e.length;\n                for(let i = 0; i< dataLength ;i++){\n                    for(let j = 0; j < eleng; j++){\n                        if(e[j] === this.departments[i].name){\n                            arrNew.push(this.departments[i])\n                        }\n                    }\n                }\n                this.$refs.tree.setCheckedNodes(arrNew);//设置勾选的值\n            },\n            handleCheckChange() {\n                let res = this.$refs.tree.getCheckedNodes(true, true); //这里两个true，1. 是否只是叶子节点 2. 是否包含半选节点（就是使得选择的时候不包含父节点）\n                let arrLabel = [];\n                let arr = [];\n                res.forEach(item => {\n                    arrLabel.push(item.name);\n                    arr.push(item);\n                });\n                this.departments = arr;\n                this.listQuery.departmentId = arrLabel;\n            }*/\n\n  }\n};",null]}