<template>
  <div class="app-container">
    <!-- 查询板块 -->
    <el-row :gutter="24">
      <el-col :span="3">
        <el-select v-model="value11" placeholder="时间" @change="typeTime">
          <el-option
            v-for="item in options8"
            :key="item.value"
            :label="item.label"
            :value="item.value"
          ></el-option>
        </el-select>
      </el-col>
      <el-col :span="8">
        <el-date-picker
          v-model="value"
          type="daterange"
          align="right"
          unlink-panels
          range-separator="~"
          start-placeholder="开始日期"
          end-placeholder="结束日期"
          :picker-options="pickerOptions"
          @change="time"
        ></el-date-picker>
      </el-col>
      <el-col :span="3">
        <el-select v-model="value2" placeholder="企业" @change="company">
          <el-option
            v-for="item in options"
            :key="item.value"
            :label="item.label"
            :value="item.value"
          ></el-option>
        </el-select>
      </el-col>
      <!-- 建筑 -->
      <el-col :span="3">
        <el-select v-model="value3" multiple placeholder="建筑" @change="jianZhu">
          <el-option
            v-for="item in options1"
            :key="item.value"
            :label="item.label"
            :value="item.value"
          ></el-option>
        </el-select>
      </el-col>
      <!-- 楼层 -->
      <el-col :span="3">
        <el-select v-model="value5" placeholder="楼层" :disabled="flag" @change="floorId">
          <el-option
            v-for="item in options2"
            :key="item.value"
            :label="item.label"
            :value="item.value"
          ></el-option>
        </el-select>
      </el-col>
      <!-- POI -->
      <el-col :span="3">
        <el-select v-model="value6" placeholder="POI" :disabled="flag" @change="poiId">
          <el-option
            v-for="item in options3"
            :key="item.value"
            :label="item.label"
            :value="item.value"
          ></el-option>
        </el-select>
      </el-col>
    </el-row>
    <el-divider></el-divider>
    <el-row :gutter="24">
      <!--  -->
      <!-- 事件编号 -->
      <el-col :span="3">
        <el-input v-model="input" placeholder="事件编号"></el-input>
      </el-col>
      <!-- 事件类型 -->
      <el-col :span="3">
        <el-select v-model="value7" placeholder="事件类型" @change="eventTypeId">
          <el-option
            v-for="item in options4"
            :key="item.value"
            :label="item.label"
            :value="item.value"
          ></el-option>
        </el-select>
      </el-col>
      <!-- 任务状态 -->
      <el-col :span="3">
        <el-select v-model="value8" placeholder="任务状态" @change="taskType">
          <el-option
            v-for="item in options5"
            :key="item.value"
            :label="item.label"
            :value="item.value"
          ></el-option>
        </el-select>
      </el-col>
      <!-- 逾期状态 -->
      <el-col :span="3">
        <el-select v-model="value9" placeholder="逾期状态" @change="delay">
          <el-option
            v-for="item in options6"
            :key="item.value"
            :label="item.label"
            :value="item.value"
          ></el-option>
        </el-select>
      </el-col>
      <el-col :span="3">
        <el-select v-model="value10" placeholder="报事人" @change="userTask">
          <el-option
            v-for="item in options7"
            :key="item.value"
            :label="item.label"
            :value="item.value"
          ></el-option>
        </el-select>
      </el-col>
      <!-- 报事人 -->
      <el-col :span="3">
        <el-input v-model="userName" placeholder="报事人"></el-input>
      </el-col>
      <!--  -->
      <el-col :span="5">
        <el-button type="primary" @click="query">查询</el-button>
        <el-button type="primary">导出</el-button>
      </el-col>
    </el-row>
    <el-divider></el-divider>
    <!-- 展示面板 -->
    <div>
      <el-row>
        <el-col :span="23">
          <el-table :data="tableData" style="width: 100%;" height="550" border>
            <el-table-column width="50" label="序号">
              <template slot-scope="scope">
                <span>{{ scope.$index+(listQuery.page - 1) * listQuery.limit + 1 }}</span>
              </template>
            </el-table-column>
            <el-table-column prop="eventCode" label="事件编号" />
            <el-table-column prop="reporter_name" label="报事人" />
            <el-table-column prop="event_type_name" label="事件类型" />
            <el-table-column prop="report_time" label="报事时间" :formatter="formatDateTime" />
            <el-table-column prop="finish_time" label="结束时间" :formatter="formatDateTime1" />
            <el-table-column prop="weiZhi" label="报事位置" />
            <el-table-column prop="distributeName" label="分配人" />
            <el-table-column prop="executeName" label="执行人" />
            <el-table-column prop="taskType" label="事件状态" />
            <el-table-column prop="delay" label="逾期状态" />
            <el-table-column prop="zip" label="操作">
              <template slot-scope="scope">
                <el-button type="text" size="small" @click="order(scope)">详情</el-button>
                <el-button type="text" size="small" @click="order(scope)">二次评分</el-button>
              </template>
            </el-table-column>
          </el-table>
          <pagination
            v-show="total>0"
            :total="total"
            :page.sync="listQuery.page"
            :limit.sync="listQuery.limit"
            @pagination="orderList"
          />
        </el-col>
      </el-row>
      <!-- 每个事件的详情 -->
      <el-drawer title="我是标题" :visible.sync="drawer" :with-header="false" size="600px">
        <div class="order">
          <div>任务编号：{{detailsList.eventCode}}</div>
          <!-- 时间展示 -->
          <p class="title">时间信息</p>
          <div class="time">
            <!-- <p>分配时间：{{detailsList.tbEventAllocationBean.createTime | teShuTime}}</p> -->
            <p>开始执行时间：{{detailsList.startTime | teShuTime}}</p>
            <!-- <p>完工时间：{{detailsList.tbEventCompleteBeans[0].createTime | teShuTime}}</p> -->
            <p>验收时间：2019-12-3 14:32:33</p>
            <p
              v-if="detailsList.tbEventCompleteBeans"
            >事件总耗时：{{detailsList.totalConsumeHours | haoMiao}}</p>
            <p>规定工时：{{detailsList.duration}}小时</p>
            <p>实际工时：{{detailsList.totalConsumeHours | haoMiao}}</p>
            <!-- <p>逾期状态：未逾期</p> -->
          </div>
          <!-- 日常任务信息展示 -->
          <p class="title">日常任务事件信息</p>
          <div class="message">
            <p>分配人：{{detailsList.reporter_name}}</p>
            <p>事件类型：{{detailsList.event_type_name}}</p>
            <!-- 只有建筑的时候现实 -->
            <p v-if="detailsList.floor_name ==null && detailsList.location_name==null">
              <span>报事位置：</span>
              <span>{{detailsList.building_name}}</span>
            </p>
            <!-- 只有建筑和楼层的时候现实 -->
            <p v-else-if="detailsList.location_name ==null">
              <span>报事位置：</span>
              <span>{{detailsList.building_name}}/{{detailsList.floor_name}}</span>
            </p>
            <!-- 都有的时候显示 -->
            <p v-else>
              <span>报事位置：</span>
              <span>{{detailsList.building_name}}/{{detailsList.floor_name}}/{{detailsList.location_name}}</span>
            </p>
            <!-- <p>位置信息：U谷/2栋</p> -->
            <p>详细位置描述：{{detailsList.location_description}}</p>
            <p>问题描述：{{detailsList.report_remark}}</p>
            <div class="img">
              报事照片：
              <el-image
                style="width: 100px; height: 100px"
                v-for="(item,i) in imgs"
                :key="i"
                :src="item"
              ></el-image>
            </div>
          </div>
          <!-- 完工信息 -->
          <p class="title">完工信息</p>
          <div class="overMessage">
            <!-- <p>完工人：{{comName1}} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;完工描述：{{detailsList.tbEventCompleteBeans[0].description}}</p> -->
            <div class="img">
              完工照片：
              <el-image
                style="width: 100px; height: 100px"
                v-for="(item,i) in imgs1"
                :key="i"
                :src="item"
              ></el-image>
            </div>
          </div>
          <!-- 验收信息 -->
          <p class="title">验收信息</p>
          <div class="check">
            <!-- <p>验收人：{{detailsList.tbEventCompleteBeans[0].checkUserName}} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;验收描述：{{detailsList.tbEventCompleteBeans[0].check_remark}}</p> -->
            <div class="img">
              验收照片：
              <el-image
                style="width: 100px; height: 100px"
                v-for="(item,i) in imgs2"
                :key="i"
                :src="item"
              ></el-image>
            </div>
          </div>
          <!-- 评价信息 -->
          <p class="title">评价信息</p>
          <div class="pingJia">
            <!-- <p>被评价人：{{comName1}} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;评价综合得分：{{detailsList.tbEventCompleteBeans[0].scoreAll}}</p> -->
            <p class="xx">
              服务态度：
              <el-rate
                v-model="value4"
                disabled
                show-score
                max:10
                text-color="#ff9900"
                score-template="{value}"
              ></el-rate>
            </p>
            <p class="xx">
              服务态度：
              <el-rate
                v-model="value4"
                disabled
                max:10
                show-score
                text-color="#ff9900"
                score-template="{value}"
              ></el-rate>
            </p>
            <p class="xx">
              服务态度：
              <el-rate
                v-model="value4"
                disabled
                max:10
                show-score
                text-color="#ff9900"
                score-template="{value}"
              ></el-rate>
            </p>
            <div class="title">进程</div>
            <div class="course" v-for="(item,i) in detailsList.tbEventLogBeans" :key="i">
              <!-- 上报&转发事件 -->
              <div
                class="flex_l"
                v-if="item.log_remark == '分配事件'||item.log_remark == '上报事件'||item.log_remark == '转交事件'||item.log_remark == '退回事件被拒绝'||item.log_remark == '延期事件审核通过'||item.log_remark == '拒绝上报无效事件'||item.log_remark == '退回事件审核同意'||item.log_remark == '延期事件审核未通过'||item.log_remark == '无效事件审核通过'||item.log_remark == '事件验证不合格'||item.log_remark == '无效事件审核未通过'||item.log_remark == '合并事件'||item.log_remark == '日常事件上报并分配'"
              >
                <i class="el-icon-timer"></i>
                <div>
                  <a :href="'tel:'+item.fromUserMobile" class="name">{{item.fromUserName}}</a>
                  {{item.processRemark}}
                  <a
                    :href="'tel:'+item.toUserMobile"
                    class="name"
                  >{{item.toUserName}}</a> 处理
                </div>
              </div>
              <!-- 完成事件 -->
              <div class="flex_l" v-if="item.log_remark == '完成事件'">
                <i class="el-icon-timer"></i>
                <div>
                  <a :href="'tel:'+item.fromUserMobile" class="name">{{item.fromUserName}}</a>
                  {{item.processRemark}}
                  <a
                    :href="'tel:'+item.toUserMobile"
                    class="name"
                  >{{item.toUserName}}</a> 验收
                </div>
              </div>
              <!-- 退回事件 -->
              <div
                class="flex_l"
                v-if="item.log_remark == '退回事件'||item.log_remark == '申请延期'||item.log_remark == '上报无效事件'"
              >
                <i class="el-icon-timer"></i>
                <div>
                  <a :href="'tel:'+item.fromUserMobile" class="name">{{item.fromUserName}}</a>
                  {{item.processRemark}}
                  <a
                    :href="'tel:'+item.toUserMobile"
                    class="name"
                  >{{item.toUserName}}</a> 审核
                </div>
              </div>
              <!-- 验收合格 -->
              <div class="flex_l" v-if="item.log_remark == '事件验证合格'">
                <i class="el-icon-timer"></i>
                <div>
                  <a :href="'tel:'+item.fromUserMobile" class="name">{{item.fromUserName}}</a>
                  {{item.processRemark}}
                  <a
                    :href="'tel:'+item.toUserMobile"
                    class="name"
                  >{{item.toUserName}}</a>
                </div>
              </div>
              <!-- 自行处理 -->
              <div class="flex_l" v-if="item.log_remark == '自行处理'">
                <i class="el-icon-timer"></i>
                <div>
                  <a :href="'tel:'+item.fromUserMobile" class="name">{{item.fromUserName}}</a>
                  {{item.processRemark}}
                </div>
              </div>
              <!-- 合并 -->
              <div class="flex_l" v-if="item.log_remark == '被合并'">
                <i class="el-icon-timer"></i>
                <div>
                  <a :href="'tel:'+item.fromUserMobile" class="name">{{item.fromUserName}}</a>
                  {{item.processRemark}}
                </div>
              </div>
              <p>
                {{item.createTime|teShuTime}}
                <i v-if="item.hours !== null">| 延时时长{{item.hours}}(小时)</i>
              </p>
              <p>
                <a
                  style="color:#7ac4ff;"
                  :key="i"
                  :href="url+item.imgUrl.split(',')[0]"
                  v-if="item.imgUrl != null && item.imgUrl != ''"
                >查看图片</a>
              </p>
              <p>描述 {{item.remark}}</p>
            </div>
            <!-- <div class="course" v-for="(item,i) in 10" :key="i"> -->
            <!-- 进度提示 -->
            <!-- <p>
                <i class="el-icon-timer"></i>
                <i class="name">季帅帅</i>
                完成事件,
                等待
                <i class="name">小朱</i>
                处理
            </p>-->
            <!-- 进度时间 -->
            <!-- <p class="time">2020/05/18 16:02</p> -->
            <!-- 描述 -->
            <!-- <p class="time">描述：阿可接受的和客户</p>
            </div>-->
          </div>
        </div>
      </el-drawer>
    </div>
  </div>
</template>

<script>
const entityVO = {
  uid: localStorage.getItem('uid'),
  buildingIds: [], //建筑id集合
  companyId: '', //公司id
  delayStatus: '', //逾期状态 2: 已逾期 1:未逾期
  deptId: '', //部门id
  detailEndTime: '', //详情结束时间
  detailStartTime: '', //详情开始时间
  detailUserName: '', //详情人员名称
  endTime: '', //时间结束
  eventCode: '', //事件编号
  eventStatus: '', //事件状态 1: 已结束(全部) 2:已结束（指派部门） 3:已结束（自行处理） 4:已结束（上报事件） 5: 未结束 6: 被合并
  eventTypeId: '', //事件类型ID
  floorId: '', //楼层id
  poiid: '', //房间位置
  startTime: '', //时间开始
  timeStatus: '', //时间状态 1: 报事时间 2: 结束时间
  userName: '', //人名
  userStatus: '', //人员角色 1: 报事人 2: 分配人 3: 执行人
  page: 1,
  limit: 10
}
import {
  subCompanyList,
  getCompanyDeptByCompanyId,
  getPCReportEventDetailByPage,
  getBuildingLocationFloor,
  getEventTypes,
  getEventInfoByEventId
} from '@/api/iguard/incidentOrder'
import Pagination from '@/components/Pagination' // Secondary
import { formatTimeToStr } from '@/utils/dateUtil' //处理后台传来的时间
export default {
  components: { Pagination },
  data() {
    return {
      value: '', //时间选择
      pickerOptions: {
        shortcuts: [
          {
            text: '最近一周',
            onClick(picker) {
              const end = new Date()
              const start = new Date()
              start.setTime(start.getTime() - 3600 * 1000 * 24 * 7)
              picker.$emit('pick', [start, end])
            }
          },
          {
            text: '最近一个月',
            onClick(picker) {
              const end = new Date()
              const start = new Date()
              start.setTime(start.getTime() - 3600 * 1000 * 24 * 30)
              picker.$emit('pick', [start, end])
            }
          },
          {
            text: '最近三个月',
            onClick(picker) {
              const end = new Date()
              const start = new Date()
              start.setTime(start.getTime() - 3600 * 1000 * 24 * 90)
              picker.$emit('pick', [start, end])
            }
          }
        ]
      },
      value2: '',
      value3: [], //建筑多选
      value4: 4.4, //评价星星
      value5: '', //楼层多选
      value6: '', //POI多选
      value7: '', //事件类型
      value8: '', //任务状态
      value9: '', //逾期状态
      value10: '', //报事人&分配人&执行人
      value11: '1', //时间选择
      drawer: false, //每个任务详情的弹出窗
      url: [
        'https://fuss10.elemecdn.com/e/5d/4a731a90594a4af544c0c25941171jpeg.jpeg',
        'https://fuss10.elemecdn.com/e/5d/4a731a90594a4af544c0c25941171jpeg.jpeg',
        'https://fuss10.elemecdn.com/e/5d/4a731a90594a4af544c0c25941171jpeg.jpeg'
      ], //报事图片
      options: [], //企业选择
      options1: [], //建筑
      options2: [
        //品牌
        {
          value: '选项1',
          label: '黄金糕'
        }
      ], //楼层
      options3: [
        //品牌
        {
          value: '选项1',
          label: '黄金糕'
        }
      ], //POI
      options4: [
        //品牌
        {
          value: '选项1',
          label: '黄金糕'
        }
      ], //事件类型
      options5: [
        {
          value: '1',
          label: '已结束(全部)'
        },
        {
          value: '2',
          label: '已结束（指派部门）'
        },
        {
          value: '3',
          label: '已结束（自行处理）'
        },
        {
          value: '4',
          label: '已结束（上报事件）'
        },
        {
          value: '5',
          label: '未结束'
        },
        {
          value: '6',
          label: '被合并'
        }
      ], //任务状态
      options6: [
        {
          value: '2',
          label: '已逾期'
        },
        {
          value: '1',
          label: '未逾期'
        }
      ], //逾期状态
      options7: [
        //品牌
        {
          value: '1',
          label: '报事人'
        },
        {
          value: '2',
          label: '分配人'
        },
        {
          value: '3',
          label: '执行人'
        }
      ], //人员选择
      options8: [
        //品牌
        {
          value: '1',
          label: '报事时间'
        },
        {
          value: '2',
          label: '结束时间'
        }
      ], //时间选择
      input: '',
      tableData: [], //详情list
      total: 0, //数据总条数
      listQuery: Object.assign({}, entityVO),
      company_id: '', //公司ID
      userName: '', //报事人
      flag: false, //建筑多选时后面的禁选
      detailsList: {}, //任务详情
      comName: [],
      comName1: '',
      imgs: [], //报事信息图片
      imgs1: [], //完工信息图片
      imgs2: [], //验收信息图片
      imgs3: [] //进度里的图片
    }
  },
  mounted() {
    this.orderList()
    this.getList()
    this.getTypeEvent()
    this.listQuery.timeStatus = this.value11
  },
  methods: {
    // 时间格式化
    formatDateTime(row, column) {
      return formatTimeToStr(row.report_time, 'yyyy-MM-dd hh:mm:ss')
    },
    // 时间格式化
    formatDateTime1(row, column) {
      return formatTimeToStr(row.finish_time, 'yyyy-MM-dd hh:mm:ss')
    },
    // 查询list
    async orderList() {
      try {
        const res = await getPCReportEventDetailByPage(this.listQuery)
        this.tableData = res.result.rows
        this.total = res.result.records
        this.tableData.forEach(item => {
          if (item.eventStatus == 1) {
            this.$set(item, 'taskType', '未完成')
          } else {
            this.$set(item, 'taskType', '已完成')
          }

          if (item.delayStatus == 1) {
            this.$set(item, 'delay', '未逾期')
          } else {
            this.$set(item, 'delay', '已逾期')
          }
          if (
            item.building_name != null &&
            item.floor_name != null &&
            item.location_name != null
          ) {
            this.$set(
              item,
              'weiZhi',
              item.building_name +
                '/' +
                item.floor_name +
                '/' +
                item.location_name
            )
          } else if (
            item.building_name != null &&
            item.floor_name != null &&
            item.location_name == null
          ) {
            this.$set(
              item,
              'weiZhi',
              item.building_name + '/' + item.floor_name
            )
          } else if (
            item.building_name != null &&
            item.floor_name == null &&
            item.location_name == null
          ) {
            this.$set(item, 'weiZhi', item.building_name)
          }
        })
        console.log(res)
      } catch (e) {
        console.log(e)
      }
    },
    // 公司列表
    async getList() {
      try {
        const res = await subCompanyList()
        this.options = res.result
        this.options.forEach(item => {
          this.$set(item, 'label', item.name)
          this.$set(item, 'value', item.id)
        })
      } catch (e) {
        console.log(e)
      }
    },
    // 点击选择公司获取id
    company(value) {
      console.log(value)
      this.company_id = value
      this.listQuery.companyId = value
      this.companyDept()
    },
    // 获取公司下面的建筑
    async companyDept() {
      try {
        const res = await getCompanyDeptByCompanyId(this.company_id)
        this.options1 = res.result
        this.options1.forEach(item => {
          this.$set(item, 'label', item.locationName)
          this.$set(item, 'value', item.id)
        })
      } catch (e) {
        console.log(e)
      }
    },
    // 获取建筑的信息
    jianZhu(value) {
      console.log(value)
      this.listQuery.buildingIds = value
      let parentId = value.join()
      console.log(parentId)
      this.getFloor(parentId)
      if (value.length > 1) {
        this.flag = true
        this.listQuery.floorId = ''
        this.listQuery.poiid = ''
      } else {
        this.flag = false
      }
    },
    // 查询建筑下楼层&房间
    async getFloor(parentId) {
      try {
        const res = await getBuildingLocationFloor(parentId)
        console.log(res)
        this.options2 = res.result
        this.options2.forEach(item => {
          this.$set(item, 'label', item.locationName)
          this.$set(item, 'value', item.id)
        })
      } catch (e) {
        console.log(e)
      }
    },
    // 查询建筑下楼层&房间
    async getFloor1(parentId) {
      try {
        const res = await getBuildingLocationFloor(parentId)
        console.log(res)
        this.options3 = res.result
        this.options3.forEach(item => {
          this.$set(item, 'label', item.locationName)
          this.$set(item, 'value', item.id)
        })
      } catch (e) {
        console.log(e)
      }
    },
    floorId(value) {
      this.listQuery.floorId = value
      this.getFloor1(value)
    },
    poiId(value) {
      this.listQuery.poiid = value
    },
    // 获取事件类型
    async getTypeEvent() {
      let obj = { uid: localStorage.getItem('uid') }
      try {
        const res = await getEventTypes(obj)
        this.options4 = res.result.rows
        this.options4.forEach(item => {
          this.$set(item, 'label', item.eventType)
          this.$set(item, 'value', item.id)
        })
        console.log(res)
      } catch (e) {
        console.log(e)
      }
    },
    // 获取事件类型id
    eventTypeId(value) {
      console.log(value)
      this.listQuery.eventTypeId = value
    },
    // 详情页面
    order(obj) {
      localStorage.setItem('baseUrl', 'http://47.100.240.228')
      this.drawer = true
      this.details(
        localStorage.getItem('uid'),
        obj.row.eventStatus,
        obj.row.eventId
      )
      console.log(obj)
    },
    // 时间不够两位数补零
    p(s) {
      return s < 10 ? '0' + s : s
    },
    // 时间
    time(value) {
      // 开始日期
      let startTime = new Date(value[0])
      let YY = startTime.getFullYear()
      let MM = this.p(startTime.getMonth() + 1)
      let DD = this.p(startTime.getDate())
      this.listQuery.detailStartTime = YY + '-' + MM + '-' + DD
      // 结束日期
      let endTime = new Date(value[1])
      let YY1 = endTime.getFullYear()
      let MM1 = this.p(endTime.getMonth() + 1)
      let DD1 = this.p(endTime.getDate())
      this.listQuery.detailEndTime = YY1 + '-' + MM1 + '-' + DD1
      console.log(this.listQuery)
    },
    typeTime(value) {
      console.log(value)
      this.listQuery.timeStatus = value
    },
    // 事件状态
    taskType(value) {
      console.log(value)
      this.listQuery.eventStatus = value
    },
    // 逾期状态
    delay(value) {
      this.listQuery.delayStatus = value
    },
    // 报事人选择
    userTask(value) {
      this.listQuery.userStatus = value
    },
    // 事件详情
    async details(uid, eventStatusNow, event_id) {
      try {
        const res = await getEventInfoByEventId(uid, eventStatusNow, event_id)
        this.detailsList = res.result
        for (var i = 0; i < res.result.tbEventCompleteBeans.length; i++) {
          this.comName.push(res.result.tbEventCompleteBeans[i].completeUserName)
        }
        this.comName1 = [...new Set(this.comName)].join(',')

        // 报事信息图片
        var img = res.result.imgurl
        var img1 = img.split(',')
        var baseUrl = unescape(localStorage.getItem('baseUrl'))
        var baseUrl1 = baseUrl.replace('https', 'http')
        for (var i = 0; i < img1.length; i++) {
          this.imgs.push(baseUrl1 + img1[i])
        }
        if (res.result.tbEventCompleteBeans == '') {
          return ''
        } else {
          if (res.result.tbEventCompleteBeans[0].check_img == '') {
            this.flag2 = false
          }
          // 完工信息图片
          var img2 = res.result.tbEventCompleteBeans[0].imgUrl
          var img3 = img2.split(',')
          var baseUrl2 = unescape(localStorage.getItem('baseUrl'))
          var baseUrl3 = baseUrl2.replace('https', 'http')
          for (var i = 0; i < img3.length; i++) {
            this.imgs1.push(baseUrl3 + img3[i])
          }
          // 验收信息
          var img4 = res.result.tbEventCompleteBeans[0].check_img
          var img5 = img4.split(',')
          var baseUrl4 = unescape(localStorage.getItem('baseUrl'))
          var baseUrl5 = baseUrl4.replace('https', 'http')
          for (var i = 0; i < img5.length; i++) {
            this.imgs2.push(baseUrl5 + img5[i])
          }
        }
      } catch (e) {
        console.log(e)
      }
    },
    // 筛选
    query() {
      this.listQuery.eventCode = this.input
      this.listQuery.detailUserName = this.userName
      this.orderList()
    }
  }
}
</script>
<style lang='less' scoped>
.app-container {
  /deep/.el-drawer__body {
    overflow-y: auto;
  }
  .order {
    padding: 10px;
    .title {
      font-size: 13px;
      color: #999;
    }
    .time {
      p {
        border-bottom: 1px solid #ccc;
      }
    }
    .message {
      border-bottom: 1px solid #aaa;
      .img {
        .el-image {
          margin: 0 5px;
        }
      }
    }
    .overMessage {
      border-bottom: 1px solid #aaa;
      .img {
        .el-image {
          margin: 0 5px;
        }
      }
    }
    .check {
      border-bottom: 1px solid #aaa;
      .img {
        .el-image {
          margin: 0 5px;
        }
      }
    }
    .pingJia {
      .xx {
        display: flex;
      }
    }
    .course {
      border-bottom: 1px solid #999;
      .flex_l {
        justify-content: flex-start;
        display: flex;
        align-items: center;
      }
      .name {
        color: #7ac4ff;
      }
      .time {
        color: #999;
      }
    }
  }
}
</style>