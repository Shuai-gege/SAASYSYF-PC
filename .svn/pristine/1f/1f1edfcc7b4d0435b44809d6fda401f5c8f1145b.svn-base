{"remainingRequest":"D:\\ysyf\\iguard-vue01\\node_modules\\babel-loader\\lib\\index.js!D:\\ysyf\\iguard-vue01\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\ysyf\\iguard-vue01\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\ysyf\\iguard-vue01\\src\\views\\online\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\ysyf\\iguard-vue01\\src\\views\\online\\index.vue","mtime":1586084705000},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1586085021683},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\babel-loader\\lib\\index.js","mtime":1586085013966},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1586085021683},{"path":"D:\\ysyf\\iguard-vue01\\node_modules\\vue-loader\\lib\\index.js","mtime":1586085255129}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"D:\\\\ysyf\\\\iguard-vue01\\\\node_modules\\\\@babel\\\\runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"D:\\\\ysyf\\\\iguard-vue01\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/asyncToGenerator\"));\n\nvar _auth = require(\"@/utils/auth\");\n\nvar _twebonline = require(\"@/api/online/twebonline\");\n\nvar _Pagination = _interopRequireDefault(require(\"@/components/Pagination\"));\n\nvar _dateUtil = require(\"@/utils/dateUtil\");\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// Secondary package based on el-pagination\nvar token = (0, _auth.getToken)();\nvar onlineVO = {\n  id: '',\n  tableName: '',\n  // 表名\n  fontBackstage: '',\n  // 前端还是后台\n  createTime: '',\n  // 创建时间\n  fontFilePath: '' // 前端生成的文件路径\n\n};\nvar _default = {\n  name: \"Online\",\n  components: {\n    Pagination: _Pagination.default\n  },\n  data: function data() {\n    return {\n      list: null,\n      total: 0,\n      tableKey: 0,\n      listLoading: false,\n      listQuery: {\n        page: 1,\n        limit: 10,\n        tableName: '',\n        // 表名\n        fontBackstage: '',\n        // 前端还是后台\n        createTime: '' // 创建时间\n\n      },\n      table_name: '',\n      // 生成前端后端代码表名\n      file_path: '',\n      // 前端生成的文件路径\n      headersObj: {\n        'LinkAdmin-Token': token\n      },\n      activeName: 'first',\n      dialogVisible: false,\n      dialogType: 'new',\n      onlineVO: Object.assign({}, onlineVO),\n      rules: {\n        examineStatus: [{\n          required: true,\n          message: '请选择审核状态',\n          trigger: 'change'\n        }]\n      }\n    };\n  },\n  watch: {\n    searchDeptName: function searchDeptName(val) {\n      this.$refs.serchDeptTree.filter(val);\n    }\n  },\n  created: function created() {\n    this.getList();\n  },\n  methods: {\n    getList: function () {\n      var _getList = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var res;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.listLoading = true; // If the Promise is rejected, the rejected value is thrown.\n\n                _context.prev = 1;\n                _context.next = 4;\n                return (0, _twebonline.onlineList)(this.listQuery);\n\n              case 4:\n                res = _context.sent;\n                this.listLoading = false;\n                this.list = res.result.rows;\n                this.total = res.result.records;\n                _context.next = 13;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](1);\n                this.listLoading = false;\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 10]]);\n      }));\n\n      function getList() {\n        return _getList.apply(this, arguments);\n      }\n\n      return getList;\n    }(),\n    // 查询\n    handleSearch: function handleSearch() {\n      this.getList();\n    },\n    // 点击删除按钮触发 删除生成的表的记录\n    handleDelete: function () {\n      var _handleDelete = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3(scope) {\n        var _this = this;\n\n        var h, tt, id;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                h = this.$createElement;\n                tt = scope.row;\n                id = tt.id;\n                this.onlineVO.id = id;\n                this.onlineVO.tableName = tt.tableName;\n                this.onlineVO.fontBackstage = tt.fontBackstage;\n                this.$msgbox({\n                  title: '删除消息',\n                  message: h('p', null, [h('span', null, '确定要删除 '), h('i', {\n                    style: 'color: teal'\n                  }, tt.tableName + ' 的历史记录吗?')]),\n                  showCancelButton: true,\n                  confirmButtonText: '确定',\n                  cancelButtonText: '取消',\n                  beforeClose: function () {\n                    var _beforeClose = (0, _asyncToGenerator2.default)(\n                    /*#__PURE__*/\n                    regeneratorRuntime.mark(function _callee2(action, instance, done) {\n                      var res;\n                      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n                        while (1) {\n                          switch (_context2.prev = _context2.next) {\n                            case 0:\n                              if (!(action === 'confirm')) {\n                                _context2.next = 7;\n                                break;\n                              }\n\n                              _context2.next = 3;\n                              return (0, _twebonline.deleteOnline)(_this.onlineVO);\n\n                            case 3:\n                              res = _context2.sent;\n\n                              if (res.code == 20000) {\n                                done();\n                              }\n\n                              _context2.next = 8;\n                              break;\n\n                            case 7:\n                              done();\n\n                            case 8:\n                            case \"end\":\n                              return _context2.stop();\n                          }\n                        }\n                      }, _callee2);\n                    }));\n\n                    function beforeClose(_x2, _x3, _x4) {\n                      return _beforeClose.apply(this, arguments);\n                    }\n\n                    return beforeClose;\n                  }()\n                }).then(function (action) {\n                  _this.$message({\n                    showClose: true,\n                    type: 'success',\n                    message: '删除成功'\n                  });\n\n                  _this.getList();\n                });\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function handleDelete(_x) {\n        return _handleDelete.apply(this, arguments);\n      }\n\n      return handleDelete;\n    }(),\n    // 审核时间\n    formatDateTimeCreate: function formatDateTimeCreate(row, column) {\n      return (0, _dateUtil.formatTimeToStr)(row.createTime, 'yyyy-MM-dd hh:mm:ss');\n    },\n    // 前后台显示转换\n    onlineStatus: function onlineStatus(row, column) {\n      var tt = row.fontBackstage;\n\n      if (tt == '0') {\n        return '后端';\n      }\n\n      if (tt == '1') {\n        return '前端';\n      }\n    },\n    // 生成后端代码方法\n    createBackstageCode: function () {\n      var _createBackstageCode = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4() {\n        var res, code;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                this.onlineVO.tableName = this.table_name.toLowerCase();\n                this.onlineVO.fontBackstage = 0;\n                _context4.next = 4;\n                return (0, _twebonline.addOnline)(this.onlineVO);\n\n              case 4:\n                res = _context4.sent;\n                code = res.code;\n\n                if (code == 20000) {\n                  this.getList();\n                }\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function createBackstageCode() {\n        return _createBackstageCode.apply(this, arguments);\n      }\n\n      return createBackstageCode;\n    }(),\n    // 生成前端代码方法\n    createFontCode: function () {\n      var _createFontCode = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee5() {\n        var res, code;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                this.onlineVO.tableName = this.table_name.toLowerCase();\n                this.onlineVO.fontBackstage = 1;\n\n                if (!(this.file_path == '' || this.file_path == null || this.file_path.trim() == '' || this.file_path.trim() == null || this.file_path.trim() == undefined)) {\n                  _context5.next = 5;\n                  break;\n                }\n\n                this.$message.error('生成前端代码必须得有路径哦~');\n                return _context5.abrupt(\"return\");\n\n              case 5:\n                this.onlineVO.fontFilePath = this.file_path;\n                _context5.next = 8;\n                return (0, _twebonline.addOnline)(this.onlineVO);\n\n              case 8:\n                res = _context5.sent;\n                debugger;\n                code = res.code;\n\n                if (code == 20000) {\n                  this.getList();\n                }\n\n              case 12:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function createFontCode() {\n        return _createFontCode.apply(this, arguments);\n      }\n\n      return createFontCode;\n    }(),\n\n    /*    createFontCode(_result) {\n           // this.createViewFolderAndFile();\n            for (let i = 0; i < _result.length; i++) {\n                const _field = _result._field;     // 字段 名称\n                const _type = _result._type;      // 字段类型\n                const _collation = _result._collation; // 编码格式\n                const _null = _result._null;    // 是否为空\n                const _key = _result._key;     // 主键，外键类型\n                const _default = _result._default;   // 默认值\n                const _extra = _result._extra;     // 主键模式，自增等。。。\n                const _privileges = _result._privileges; // 字段权限\n                const _comment = _result._comment; // 字段注释\n             }\n        },*/\n    // 在views文件夹下创建文件夹和文件，文件夹名称根据表名来定义\n    createViewFolderAndFile: function createViewFolderAndFile() {\n      alert(\"====\" + this.table_name); // 需要创建的文件夹的名字\n\n      var folder_name = this.tableNameConvert(this.table_name); // 获取当前文件所在路径\n\n      var _file_path = document.location.toString();\n    },\n    // 将表名中的下划线去掉，并将大写转换为小写\n    tableNameConvert: function tableNameConvert(table_name) {\n      table_name = table_name.replace(\"_\", \"\");\n      table_name = table_name.toLowerCase();\n      return table_name;\n    },\n    getPathRootJump: function getPathRootJump() {\n      var pathName = window.location.pathname.substring(1);\n      var webName = pathName == '' ? '' : pathName.substring(0, pathName.indexOf('/'));\n      var path_root = window.location.protocol + '//' + window.location.host + '/' + webName + '/';\n      return path_root;\n    } // 点击编辑按钮触发\n\n    /*handleEdit(scope) {\n        debugger;\n        this.dialogVisible = true\n        this.onlineVO = deepClone(scope.row)\n        const tt = this.onlineVO.createTime;\n        this.onlineVO.createTime = this.formatDateTimeTemp(tt);\n    },*/\n    // 编辑功能结束，点击确定按钮触发\n\n    /*async confirmTask() {\n        this.onlineVO.createTime = this.formatDateTimeTemp(this.onlineVO.createTime);\n        const res = await editTask(this.onlineVO);\n        const result = res.result;\n        if (result) {\n            this.$message({\n                showClose: true,\n                message: '编辑成功',\n                type: 'success'\n            })\n            this.dialogVisible = false;\n            this.getList();\n        }\n    }*/\n\n  }\n};\nexports.default = _default;",null]}